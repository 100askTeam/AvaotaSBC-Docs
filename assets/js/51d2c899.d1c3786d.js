"use strict";(self.webpackChunkavaota_docs=self.webpackChunkavaota_docs||[]).push([[7589],{70682:(x,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>e,metadata:()=>t,toc:()=>d});var _=r(85893),i=r(11151);const e={},s="SPI \u9a71\u52a8",t={id:"linux-manual/syterkit/driver/spi",title:"SPI \u9a71\u52a8",description:"\u7ed3\u6784\u4f53",source:"@site/docs/linux-manual/syterkit/driver/spi.md",sourceDirName:"linux-manual/syterkit/driver",slug:"/linux-manual/syterkit/driver/spi",permalink:"/linux-manual/syterkit/driver/spi",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"linuxManualSidebar",previous:{title:"PMU \u9a71\u52a8",permalink:"/linux-manual/syterkit/driver/pmu"},next:{title:"UART \u9a71\u52a8",permalink:"/linux-manual/syterkit/driver/uart"}},l={},d=[{value:"\u7ed3\u6784\u4f53",id:"\u7ed3\u6784\u4f53",level:2},{value:"API \u63a5\u53e3",id:"api-\u63a5\u53e3",level:2},{value:"sunxi_spi_init",id:"sunxi_spi_init",level:3},{value:"sunxi_spi_disable",id:"sunxi_spi_disable",level:3},{value:"sunxi_spi_transfer",id:"sunxi_spi_transfer",level:3},{value:"\u4f7f\u7528\u793a\u4f8b",id:"\u4f7f\u7528\u793a\u4f8b",level:2},{value:"\u4f7f\u7528 SPI \u9a71\u52a8 SPI LCD \u5c4f",id:"\u4f7f\u7528-spi-\u9a71\u52a8-spi-lcd-\u5c4f",level:4}];function c(x){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...x.components};return(0,_.jsxs)(_.Fragment,{children:[(0,_.jsx)(n.h1,{id:"spi-\u9a71\u52a8",children:"SPI \u9a71\u52a8"}),"\n",(0,_.jsx)(n.h2,{id:"\u7ed3\u6784\u4f53",children:"\u7ed3\u6784\u4f53"}),"\n",(0,_.jsx)(n.p,{children:"\u5b9a\u4e49 SPI \u6a21\u5f0f"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:"typedef enum {\r\n    SPI_IO_SINGLE = 0x00,\r\n    SPI_IO_DUAL_RX,\r\n    SPI_IO_QUAD_RX,\r\n    SPI_IO_QUAD_IO,\r\n} spi_io_mode_t;\n"})}),"\n",(0,_.jsx)(n.p,{children:"\u5b9a\u4e49 SPI \u65f6\u949f\u5bc4\u5b58\u5668"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:"typedef struct spi_clk_reg {\r\n    uint32_t ccu_base;\r\n    uint32_t spi_clk_reg_offest;\r\n    uint32_t spi_bgr_reg_offset;\r\n} spi_clk_reg_t;\n"})}),"\n",(0,_.jsx)(n.p,{children:"\u5b9a\u4e49 SPI \u63cf\u8ff0\uff0c\u5305\u62ec\u57fa\u5730\u5740\uff0c\u63a7\u5236\u5668\u53f7\uff0cGPIO\u914d\u7f6e"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:"typedef struct {\r\n    uint32_t base;\r\n    uint8_t id;\r\n    spi_clk_reg_t clk_reg;\r\n    uint32_t clk_rate;\r\n    gpio_mux_t gpio_cs;\r\n    gpio_mux_t gpio_sck;\r\n    gpio_mux_t gpio_miso;\r\n    gpio_mux_t gpio_mosi;\r\n    gpio_mux_t gpio_wp;\r\n    gpio_mux_t gpio_hold;\r\n} sunxi_spi_t;\n"})}),"\n",(0,_.jsx)(n.h2,{id:"api-\u63a5\u53e3",children:"API \u63a5\u53e3"}),"\n",(0,_.jsx)(n.h3,{id:"sunxi_spi_init",children:"sunxi_spi_init"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:"int sunxi_spi_init(sunxi_spi_t *spi);\n"})}),"\n",(0,_.jsx)(n.p,{children:"\u521d\u59cb\u5316\u5177\u6709\u6307\u5b9a\u914d\u7f6e\u7684Sunxi SPI\u63a7\u5236\u5668\u3002"}),"\n",(0,_.jsxs)(n.ul,{children:["\n",(0,_.jsxs)(n.li,{children:[(0,_.jsx)(n.code,{children:"spi"}),"\uff1a\u6307\u5411Sunxi SPI\u63a7\u5236\u5668\u7ed3\u6784\u7684\u6307\u9488\u3002"]}),"\n",(0,_.jsx)(n.li,{children:"\u8fd4\u56de\u503c\uff1a\u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de0\uff1b\u5982\u679c\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002"}),"\n"]}),"\n",(0,_.jsx)(n.h3,{id:"sunxi_spi_disable",children:"sunxi_spi_disable"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:"void sunxi_spi_disable(sunxi_spi_t *spi);\n"})}),"\n",(0,_.jsx)(n.p,{children:"\u7981\u7528Sunxi SPI\u63a7\u5236\u5668\u3002"}),"\n",(0,_.jsxs)(n.ul,{children:["\n",(0,_.jsxs)(n.li,{children:[(0,_.jsx)(n.code,{children:"spi"}),"\uff1a\u6307\u5411Sunxi SPI\u63a7\u5236\u5668\u7ed3\u6784\u7684\u6307\u9488\u3002"]}),"\n"]}),"\n",(0,_.jsx)(n.h3,{id:"sunxi_spi_transfer",children:"sunxi_spi_transfer"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:"int sunxi_spi_transfer(sunxi_spi_t *spi, spi_io_mode_t mode, void *txbuf, uint32_t txlen, void *rxbuf, uint32_t rxlen);\n"})}),"\n",(0,_.jsx)(n.p,{children:"\u4f7f\u7528Sunxi SPI\u63a7\u5236\u5668\u6267\u884cSPI\u4f20\u8f93\u3002"}),"\n",(0,_.jsxs)(n.ul,{children:["\n",(0,_.jsxs)(n.li,{children:[(0,_.jsx)(n.code,{children:"spi"}),"\uff1a\u6307\u5411Sunxi SPI\u63a7\u5236\u5668\u7ed3\u6784\u7684\u6307\u9488\u3002"]}),"\n",(0,_.jsxs)(n.li,{children:[(0,_.jsx)(n.code,{children:"mode"}),"\uff1a\u4f20\u8f93\u65f6\u8981\u4f7f\u7528\u7684SPI IO\u6a21\u5f0f\uff08\u4f8b\u5982\uff0cSPI_IO_MODE_SINGLE\uff0cSPI_IO_MODE_DUAL\uff0cSPI_IO_MODE_QUAD\uff09\u3002"]}),"\n",(0,_.jsxs)(n.li,{children:[(0,_.jsx)(n.code,{children:"txbuf"}),"\uff1a\u6307\u5411\u8981\u4f20\u8f93\u7684\u6570\u636e\u7684\u7f13\u51b2\u533a\u7684\u6307\u9488\u3002"]}),"\n",(0,_.jsxs)(n.li,{children:[(0,_.jsx)(n.code,{children:"txlen"}),"\uff1a\u8981\u4f20\u8f93\u7684\u6570\u636e\u7684\u957f\u5ea6\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002"]}),"\n",(0,_.jsxs)(n.li,{children:[(0,_.jsx)(n.code,{children:"rxbuf"}),"\uff1a\u7528\u4e8e\u5b58\u50a8\u63a5\u6536\u5230\u7684\u6570\u636e\u7684\u7f13\u51b2\u533a\u7684\u6307\u9488\u3002"]}),"\n",(0,_.jsxs)(n.li,{children:[(0,_.jsx)(n.code,{children:"rxlen"}),"\uff1a\u8981\u63a5\u6536\u7684\u6570\u636e\u7684\u957f\u5ea6\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\u3002"]}),"\n",(0,_.jsx)(n.li,{children:"\u8fd4\u56de\u503c\uff1a\u5982\u679c\u6210\u529f\uff0c\u5219\u8fd4\u56de0\uff1b\u5982\u679c\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u4ee3\u7801\u3002"}),"\n"]}),"\n",(0,_.jsx)(n.h2,{id:"\u4f7f\u7528\u793a\u4f8b",children:"\u4f7f\u7528\u793a\u4f8b"}),"\n",(0,_.jsx)(n.p,{children:"\u9996\u5148\u5b9a\u4e49 SPI \u4f7f\u7528\u7684\u8bbe\u5907"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:"sunxi_spi_t sunxi_spi0 = {\r\n        .base = SUNXI_SPI0_BASE,\r\n        .id = 0,\r\n        .clk_rate = 75 * 1000 * 1000,\r\n        .gpio_cs = {GPIO_PIN(GPIO_PORTC, 1), GPIO_PERIPH_MUX4},\r\n        .gpio_sck = {GPIO_PIN(GPIO_PORTC, 0), GPIO_PERIPH_MUX4},\r\n        .gpio_mosi = {GPIO_PIN(GPIO_PORTC, 2), GPIO_PERIPH_MUX4},\r\n        .gpio_miso = {GPIO_PIN(GPIO_PORTC, 3), GPIO_PERIPH_MUX4},\r\n        .gpio_wp = {GPIO_PIN(GPIO_PORTC, 4), GPIO_PERIPH_MUX4},\r\n        .gpio_hold = {GPIO_PIN(GPIO_PORTC, 5), GPIO_PERIPH_MUX4},\r\n};\n"})}),"\n",(0,_.jsx)(n.p,{children:"\u7136\u540e\u521d\u59cb\u5316 SPI"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:'if (sunxi_spi_init(&sunxi_spi0_lcd) != 0) {\r\n    printk_error("SPI: init failed\\n");\r\n}\n'})}),"\n",(0,_.jsx)(n.p,{children:"\u7136\u540e\u53d1\u9001\u6570\u636e"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:'if (sunxi_spi_transfer(&sunxi_spi0_lcd, SPI_IO_SINGLE, tx, 1, 0, 0) < 0)\r\n    printk_error("SPI: SPI Xfer error!\\n");\n'})}),"\n",(0,_.jsx)(n.p,{children:"\u5982\u679c\u662f\u7279\u6b8a\u57df\u7684SPI\u8bbe\u5907\uff0c\u53ef\u4ee5\u5b9a\u4e49\u5176\u65f6\u949f\u5730\u5740\uff0c\u4f8b\u5982\u8fd9\u91cc\u7684\u5728 CPUS \u57df\u4e2d\u7684 SPI \u63a7\u5236\u5668"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:"sunxi_spi_t sunxi_spi0_lcd = {\r\n        .base = SUNXI_R_SPI_BASE,\r\n        .clk_reg = {\r\n                .ccu_base = SUNXI_R_PRCM_BASE,\r\n                .spi_clk_reg_offest = SUNXI_S_SPI_CLK_REG,\r\n                .spi_bgr_reg_offset = SUNXI_S_SPI_BGR_REG,\r\n        },\r\n        .id = 0,\r\n        .clk_rate = 75 * 1000 * 1000,\r\n        .gpio_cs = {GPIO_PIN(GPIO_PORTL, 10), GPIO_PERIPH_MUX6},\r\n        .gpio_sck = {GPIO_PIN(GPIO_PORTL, 11), GPIO_PERIPH_MUX6},\r\n        .gpio_mosi = {GPIO_PIN(GPIO_PORTL, 12), GPIO_PERIPH_MUX6},\r\n};\n"})}),"\n",(0,_.jsx)(n.h4,{id:"\u4f7f\u7528-spi-\u9a71\u52a8-spi-lcd-\u5c4f",children:"\u4f7f\u7528 SPI \u9a71\u52a8 SPI LCD \u5c4f"}),"\n",(0,_.jsx)(n.pre,{children:(0,_.jsx)(n.code,{className:"language-c",children:'/* SPDX-License-Identifier: Apache-2.0 */\r\n\r\n#include <stdbool.h>\r\n#include <stddef.h>\r\n#include <stdint.h>\r\n#include <types.h>\r\n\r\n#include <config.h>\r\n#include <log.h>\r\n#include <timer.h>\r\n\r\n#include <common.h>\r\n#include <jmp.h>\r\n#include <mmu.h>\r\n#include <smalloc.h>\r\n#include <sstdlib.h>\r\n#include <string.h>\r\n\r\n#include <cli.h>\r\n#include <cli_shell.h>\r\n#include <cli_termesc.h>\r\n\r\n#include <reg-ncat.h>\r\n#include <sys-clk.h>\r\n#include <sys-dram.h>\r\n#include <sys-i2c.h>\r\n#include <sys-rtc.h>\r\n#include <sys-sdcard.h>\r\n#include <sys-sid.h>\r\n#include <sys-spi.h>\r\n\r\n#include <pmu/axp.h>\r\n\r\n#include <fdt_wrapper.h>\r\n#include <ff.h>\r\n#include <sys-sdhci.h>\r\n#include <uart.h>\r\n\r\n#define SPI_LCD_COLOR_WHITE 0xFFFF\r\n#define SPI_LCD_COLOR_BLACK 0x0000\r\n#define SPI_LCD_COLOR_BLUE 0x001F\r\n#define SPI_LCD_COLOR_BRED 0XF81F\r\n#define SPI_LCD_COLOR_GRED 0XFFE0\r\n#define SPI_LCD_COLOR_GBLUE 0X07FF\r\n#define SPI_LCD_COLOR_RED 0xF800\r\n#define SPI_LCD_COLOR_MAGENTA 0xF81F\r\n#define SPI_LCD_COLOR_GREEN 0x07E0\r\n#define SPI_LCD_COLOR_CYAN 0x7FFF\r\n#define SPI_LCD_COLOR_YELLOW 0xFFE0\r\n\r\nstatic sunxi_spi_t sunxi_spi0_lcd = {\r\n        .base = SUNXI_R_SPI_BASE,\r\n        .clk_reg = {\r\n                .ccu_base = SUNXI_R_PRCM_BASE,\r\n                .spi_clk_reg_offest = SUNXI_S_SPI_CLK_REG,\r\n                .spi_bgr_reg_offset = SUNXI_S_SPI_BGR_REG,\r\n        },\r\n        .id = 0,\r\n        .clk_rate = 75 * 1000 * 1000,\r\n        .gpio_cs = {GPIO_PIN(GPIO_PORTL, 10), GPIO_PERIPH_MUX6},\r\n        .gpio_sck = {GPIO_PIN(GPIO_PORTL, 11), GPIO_PERIPH_MUX6},\r\n        .gpio_mosi = {GPIO_PIN(GPIO_PORTL, 12), GPIO_PERIPH_MUX6},\r\n};\r\n\r\nstatic gpio_mux_t lcd_dc_pins = {\r\n        .pin = GPIO_PIN(GPIO_PORTL, 13),\r\n        .mux = GPIO_OUTPUT,\r\n};\r\n\r\nstatic gpio_mux_t lcd_res_pins = {\r\n        .pin = GPIO_PIN(GPIO_PORTL, 9),\r\n        .mux = GPIO_OUTPUT,\r\n};\r\n\r\nstatic gpio_mux_t lcd_blk_pins = {\r\n        .pin = GPIO_PIN(GPIO_PORTL, 8),\r\n        .mux = GPIO_OUTPUT,\r\n};\r\n\r\nstatic void LCD_Set_DC(uint8_t val) {\r\n    sunxi_gpio_set_value(lcd_dc_pins.pin, val);\r\n}\r\n\r\nstatic void LCD_Set_RES(uint8_t val) {\r\n    sunxi_gpio_set_value(lcd_res_pins.pin, val);\r\n}\r\n\r\nstatic void LCD_Write_Bus(uint8_t dat) {\r\n    uint8_t tx[1]; /* Transmit buffer */\r\n    tx[0] = dat;\r\n    /* Perform SPI transfer */\r\n    if (sunxi_spi_transfer(&sunxi_spi0_lcd, SPI_IO_SINGLE, tx, 1, 0, 0) < 0)\r\n        printk_error("SPI: SPI Xfer error!\\n");\r\n}\r\n\r\nstatic void LCD_Write_Data_Bus(void *dat, uint32_t len) {\r\n    if (sunxi_spi_transfer(&sunxi_spi0_lcd, SPI_IO_SINGLE, dat, len, 0, 0) < 0)\r\n        printk_error("SPI: SPI Xfer error!\\n");\r\n}\r\n\r\nstatic void LCD_WR_DATA(uint16_t dat) {\r\n    LCD_Write_Bus(dat >> 8);\r\n    LCD_Write_Bus(dat);\r\n}\r\n\r\nstatic void LCD_WR_DATA8(uint8_t dat) {\r\n    LCD_Write_Bus(dat);\r\n}\r\n\r\nstatic void LCD_WR_REG(uint8_t dat) {\r\n    LCD_Set_DC(0);\r\n    LCD_Write_Bus(dat);\r\n    LCD_Set_DC(1);\r\n}\r\n\r\nstatic void LCD_Address_Set(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {\r\n    LCD_WR_REG(0x2a);\r\n    LCD_WR_DATA(x1 + 40);\r\n    LCD_WR_DATA(x2 + 40);\r\n    LCD_WR_REG(0x2b);\r\n    LCD_WR_DATA(y1 + 52);\r\n    LCD_WR_DATA(y2 + 52);\r\n    LCD_WR_REG(0x2c);\r\n}\r\n\r\nstatic void LCD_Open_BLK() {\r\n    sunxi_gpio_set_value(lcd_blk_pins.pin, 1);\r\n}\r\n\r\n#define LCD_W 240\r\n#define LCD_H 135\r\n\r\nstatic void LCD_Fill_All(uint16_t color) {\r\n    uint16_t i, j;\r\n    LCD_Address_Set(0, 0, LCD_W - 1, LCD_H - 1);\r\n    uint16_t *video_mem = smalloc(LCD_W * LCD_H);\r\n\r\n    for (uint32_t i = 0; i < LCD_W * LCD_H; i++) {\r\n        video_mem[i] = color;\r\n    }\r\n\r\n    LCD_Write_Data_Bus(video_mem, LCD_W * LCD_H * (sizeof(uint16_t) / sizeof(uint8_t)));\r\n\r\n    sfree(video_mem);\r\n}\r\n\r\nstatic void LCD_Init(void) {\r\n    sunxi_gpio_init(lcd_dc_pins.pin, lcd_dc_pins.mux);\r\n    sunxi_gpio_init(lcd_res_pins.pin, lcd_res_pins.mux);\r\n    sunxi_gpio_init(lcd_blk_pins.pin, lcd_blk_pins.mux);\r\n\r\n    dma_init();\r\n\r\n    if (sunxi_spi_init(&sunxi_spi0_lcd) != 0) {\r\n        printk_error("SPI: init failed\\n");\r\n    }\r\n\r\n    LCD_Set_RES(0);\r\n    mdelay(100);\r\n    LCD_Set_RES(1);\r\n    mdelay(100);\r\n\r\n    LCD_WR_REG(0x11);\r\n    mdelay(120);\r\n    LCD_WR_REG(0x36);\r\n    LCD_WR_DATA8(0xA0);\r\n\r\n    LCD_WR_REG(0x3A);\r\n    LCD_WR_DATA8(0x05);\r\n\r\n    LCD_WR_REG(0xB2);\r\n    LCD_WR_DATA8(0x0C);\r\n    LCD_WR_DATA8(0x0C);\r\n    LCD_WR_DATA8(0x00);\r\n    LCD_WR_DATA8(0x33);\r\n    LCD_WR_DATA8(0x33);\r\n\r\n    LCD_WR_REG(0xB7);\r\n    LCD_WR_DATA8(0x35);\r\n\r\n    LCD_WR_REG(0xBB);\r\n    LCD_WR_DATA8(0x19);\r\n\r\n    LCD_WR_REG(0xC0);\r\n    LCD_WR_DATA8(0x2C);\r\n\r\n    LCD_WR_REG(0xC2);\r\n    LCD_WR_DATA8(0x01);\r\n\r\n    LCD_WR_REG(0xC3);\r\n    LCD_WR_DATA8(0x12);\r\n\r\n    LCD_WR_REG(0xC4);\r\n    LCD_WR_DATA8(0x20);\r\n\r\n    LCD_WR_REG(0xC6);\r\n    LCD_WR_DATA8(0x0F);\r\n\r\n    LCD_WR_REG(0xD0);\r\n    LCD_WR_DATA8(0xA4);\r\n    LCD_WR_DATA8(0xA1);\r\n\r\n    LCD_WR_REG(0xE0);\r\n    LCD_WR_DATA8(0xD0);\r\n    LCD_WR_DATA8(0x04);\r\n    LCD_WR_DATA8(0x0D);\r\n    LCD_WR_DATA8(0x11);\r\n    LCD_WR_DATA8(0x13);\r\n    LCD_WR_DATA8(0x2B);\r\n    LCD_WR_DATA8(0x3F);\r\n    LCD_WR_DATA8(0x54);\r\n    LCD_WR_DATA8(0x4C);\r\n    LCD_WR_DATA8(0x18);\r\n    LCD_WR_DATA8(0x0D);\r\n    LCD_WR_DATA8(0x0B);\r\n    LCD_WR_DATA8(0x1F);\r\n    LCD_WR_DATA8(0x23);\r\n\r\n    LCD_WR_REG(0xE1);\r\n    LCD_WR_DATA8(0xD0);\r\n    LCD_WR_DATA8(0x04);\r\n    LCD_WR_DATA8(0x0C);\r\n    LCD_WR_DATA8(0x11);\r\n    LCD_WR_DATA8(0x13);\r\n    LCD_WR_DATA8(0x2C);\r\n    LCD_WR_DATA8(0x3F);\r\n    LCD_WR_DATA8(0x44);\r\n    LCD_WR_DATA8(0x51);\r\n    LCD_WR_DATA8(0x2F);\r\n    LCD_WR_DATA8(0x1F);\r\n    LCD_WR_DATA8(0x1F);\r\n    LCD_WR_DATA8(0x20);\r\n    LCD_WR_DATA8(0x23);\r\n\r\n    LCD_WR_REG(0x21);\r\n\r\n    LCD_WR_REG(0x29);\r\n\r\n    LCD_Fill_All(0x0000);\r\n}\r\n\r\n#define SPLASH_START_X 52\r\n#define SPLASH_START_Y 43\r\n#define SPLASH_W 135\r\n#define SPLASH_H 48\r\n\r\nstatic void LCD_Show_Splash(uint8_t *splash_dest) {\r\n    uint16_t i, j, k = 0;\r\n    LCD_Address_Set(SPLASH_START_X, SPLASH_START_Y, SPLASH_START_X + SPLASH_W - 1, SPLASH_START_Y + SPLASH_H - 1);\r\n\r\n    uint16_t *video_mem = smalloc(SPLASH_W * SPLASH_H);\r\n\r\n    for (i = 0; i < SPLASH_W; i++) {\r\n        for (j = 0; j < SPLASH_H; j++) {\r\n            video_mem[k] = (splash_dest[k * 2] << 8) | splash_dest[k * 2 + 1];\r\n            k++;\r\n        }\r\n    }\r\n\r\n    LCD_Write_Data_Bus(video_mem, SPLASH_W * SPLASH_H * (sizeof(uint16_t) / sizeof(uint8_t)));\r\n\r\n    sfree(video_mem);\r\n}\r\n\r\nstatic const unsigned char ascii_1206[][12] = {\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*" ",0*/\r\n        {0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00}, /*"!",1*/\r\n        {0x14, 0x14, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*""",2*/\r\n        {0x00, 0x00, 0x0A, 0x0A, 0x1F, 0x0A, 0x0A, 0x1F, 0x0A, 0x0A, 0x00, 0x00}, /*"#",3*/\r\n        {0x00, 0x04, 0x0E, 0x15, 0x05, 0x06, 0x0C, 0x14, 0x15, 0x0E, 0x04, 0x00}, /*"$",4*/\r\n        {0x00, 0x00, 0x12, 0x15, 0x0D, 0x15, 0x2E, 0x2C, 0x2A, 0x12, 0x00, 0x00}, /*"%",5*/\r\n        {0x00, 0x00, 0x04, 0x0A, 0x0A, 0x36, 0x15, 0x15, 0x29, 0x16, 0x00, 0x00}, /*"&",6*/\r\n        {0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"\'",7*/\r\n        {0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x04, 0x08, 0x08, 0x10, 0x00}, /*"(",8*/\r\n        {0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x08, 0x08, 0x04, 0x04, 0x02, 0x00}, /*")",9*/\r\n        {0x00, 0x00, 0x00, 0x04, 0x15, 0x0E, 0x0E, 0x15, 0x04, 0x00, 0x00, 0x00}, /*"*",10*/\r\n        {0x00, 0x00, 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00}, /*"+",11*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x01, 0x00}, /*",",12*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"-",13*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00}, /*".",14*/\r\n        {0x00, 0x20, 0x10, 0x10, 0x08, 0x08, 0x04, 0x04, 0x02, 0x02, 0x01, 0x00}, /*"/",15*/\r\n        {0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00}, /*"0",16*/\r\n        {0x00, 0x00, 0x04, 0x06, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00}, /*"1",17*/\r\n        {0x00, 0x00, 0x0E, 0x11, 0x11, 0x08, 0x04, 0x02, 0x01, 0x1F, 0x00, 0x00}, /*"2",18*/\r\n        {0x00, 0x00, 0x0E, 0x11, 0x10, 0x0C, 0x10, 0x10, 0x11, 0x0E, 0x00, 0x00}, /*"3",19*/\r\n        {0x00, 0x00, 0x08, 0x0C, 0x0C, 0x0A, 0x09, 0x1F, 0x08, 0x1C, 0x00, 0x00}, /*"4",20*/\r\n        {0x00, 0x00, 0x1F, 0x01, 0x01, 0x0F, 0x11, 0x10, 0x11, 0x0E, 0x00, 0x00}, /*"5",21*/\r\n        {0x00, 0x00, 0x0C, 0x12, 0x01, 0x0D, 0x13, 0x11, 0x11, 0x0E, 0x00, 0x00}, /*"6",22*/\r\n        {0x00, 0x00, 0x1E, 0x10, 0x08, 0x08, 0x04, 0x04, 0x04, 0x04, 0x00, 0x00}, /*"7",23*/\r\n        {0x00, 0x00, 0x0E, 0x11, 0x11, 0x0E, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00}, /*"8",24*/\r\n        {0x00, 0x00, 0x0E, 0x11, 0x11, 0x19, 0x16, 0x10, 0x09, 0x06, 0x00, 0x00}, /*"9",25*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00}, /*":",26*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00}, /*";",27*/\r\n        {0x00, 0x00, 0x10, 0x08, 0x04, 0x02, 0x02, 0x04, 0x08, 0x10, 0x00, 0x00}, /*"<",28*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"=",29*/\r\n        {0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x10, 0x08, 0x04, 0x02, 0x00, 0x00}, /*">",30*/\r\n        {0x00, 0x00, 0x0E, 0x11, 0x11, 0x08, 0x04, 0x04, 0x00, 0x04, 0x00, 0x00}, /*"?",31*/\r\n        {0x00, 0x00, 0x1C, 0x22, 0x29, 0x2D, 0x2D, 0x1D, 0x22, 0x1C, 0x00, 0x00}, /*"@",32*/\r\n        {0x00, 0x00, 0x04, 0x04, 0x0C, 0x0A, 0x0A, 0x1E, 0x12, 0x33, 0x00, 0x00}, /*"A",33*/\r\n        {0x00, 0x00, 0x0F, 0x12, 0x12, 0x0E, 0x12, 0x12, 0x12, 0x0F, 0x00, 0x00}, /*"B",34*/\r\n        {0x00, 0x00, 0x1E, 0x11, 0x01, 0x01, 0x01, 0x01, 0x11, 0x0E, 0x00, 0x00}, /*"C",35*/\r\n        {0x00, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0F, 0x00, 0x00}, /*"D",36*/\r\n        {0x00, 0x00, 0x1F, 0x12, 0x0A, 0x0E, 0x0A, 0x02, 0x12, 0x1F, 0x00, 0x00}, /*"E",37*/\r\n        {0x00, 0x00, 0x1F, 0x12, 0x0A, 0x0E, 0x0A, 0x02, 0x02, 0x07, 0x00, 0x00}, /*"F",38*/\r\n        {0x00, 0x00, 0x1C, 0x12, 0x01, 0x01, 0x39, 0x11, 0x12, 0x0C, 0x00, 0x00}, /*"G",39*/\r\n        {0x00, 0x00, 0x33, 0x12, 0x12, 0x1E, 0x12, 0x12, 0x12, 0x33, 0x00, 0x00}, /*"H",40*/\r\n        {0x00, 0x00, 0x1F, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1F, 0x00, 0x00}, /*"I",41*/\r\n        {0x00, 0x00, 0x3E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x07}, /*"J",42*/\r\n        {0x00, 0x00, 0x37, 0x12, 0x0A, 0x06, 0x0A, 0x12, 0x12, 0x37, 0x00, 0x00}, /*"K",43*/\r\n        {0x00, 0x00, 0x07, 0x02, 0x02, 0x02, 0x02, 0x02, 0x22, 0x3F, 0x00, 0x00}, /*"L",44*/\r\n        {0x00, 0x00, 0x3B, 0x1B, 0x1B, 0x1B, 0x15, 0x15, 0x15, 0x35, 0x00, 0x00}, /*"M",45*/\r\n        {0x00, 0x00, 0x3B, 0x12, 0x16, 0x16, 0x1A, 0x1A, 0x12, 0x17, 0x00, 0x00}, /*"N",46*/\r\n        {0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0E, 0x00, 0x00}, /*"O",47*/\r\n        {0x00, 0x00, 0x0F, 0x12, 0x12, 0x0E, 0x02, 0x02, 0x02, 0x07, 0x00, 0x00}, /*"P",48*/\r\n        {0x00, 0x00, 0x0E, 0x11, 0x11, 0x11, 0x11, 0x17, 0x19, 0x0E, 0x18, 0x00}, /*"Q",49*/\r\n        {0x00, 0x00, 0x0F, 0x12, 0x12, 0x0E, 0x0A, 0x12, 0x12, 0x37, 0x00, 0x00}, /*"R",50*/\r\n        {0x00, 0x00, 0x1E, 0x11, 0x01, 0x06, 0x08, 0x10, 0x11, 0x0F, 0x00, 0x00}, /*"S",51*/\r\n        {0x00, 0x00, 0x1F, 0x15, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00}, /*"T",52*/\r\n        {0x00, 0x00, 0x33, 0x12, 0x12, 0x12, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x00}, /*"U",53*/\r\n        {0x00, 0x00, 0x33, 0x12, 0x12, 0x0A, 0x0A, 0x0C, 0x04, 0x04, 0x00, 0x00}, /*"V",54*/\r\n        {0x00, 0x00, 0x15, 0x15, 0x15, 0x15, 0x0E, 0x0A, 0x0A, 0x0A, 0x00, 0x00}, /*"W",55*/\r\n        {0x00, 0x00, 0x1B, 0x0A, 0x0A, 0x04, 0x04, 0x0A, 0x0A, 0x1B, 0x00, 0x00}, /*"X",56*/\r\n        {0x00, 0x00, 0x1B, 0x0A, 0x0A, 0x0A, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00}, /*"Y",57*/\r\n        {0x00, 0x00, 0x1F, 0x09, 0x08, 0x04, 0x04, 0x02, 0x12, 0x1F, 0x00, 0x00}, /*"Z",58*/\r\n        {0x1C, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1C, 0x00}, /*"[",59*/\r\n        {0x00, 0x02, 0x02, 0x04, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x00}, /*"\\",60*/\r\n        {0x0E, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0E, 0x00}, /*"]",61*/\r\n        {0x04, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"^",62*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F}, /*"_",63*/\r\n        {0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"`",64*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x1C, 0x12, 0x3C, 0x00, 0x00}, /*"a",65*/\r\n        {0x00, 0x03, 0x02, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x0E, 0x00, 0x00}, /*"b",66*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x12, 0x02, 0x12, 0x0C, 0x00, 0x00}, /*"c",67*/\r\n        {0x00, 0x18, 0x10, 0x10, 0x10, 0x1C, 0x12, 0x12, 0x12, 0x3C, 0x00, 0x00}, /*"d",68*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x1E, 0x02, 0x1C, 0x00, 0x00}, /*"e",69*/\r\n        {0x00, 0x18, 0x24, 0x04, 0x04, 0x1E, 0x04, 0x04, 0x04, 0x1E, 0x00, 0x00}, /*"f",70*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x12, 0x0C, 0x02, 0x1C, 0x22, 0x1C}, /*"g",71*/\r\n        {0x00, 0x03, 0x02, 0x02, 0x02, 0x0E, 0x12, 0x12, 0x12, 0x37, 0x00, 0x00}, /*"h",72*/\r\n        {0x00, 0x04, 0x04, 0x00, 0x00, 0x06, 0x04, 0x04, 0x04, 0x0E, 0x00, 0x00}, /*"i",73*/\r\n        {0x00, 0x08, 0x08, 0x00, 0x00, 0x0C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x07}, /*"j",74*/\r\n        {0x00, 0x03, 0x02, 0x02, 0x02, 0x1A, 0x0A, 0x06, 0x0A, 0x13, 0x00, 0x00}, /*"k",75*/\r\n        {0x00, 0x07, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x1F, 0x00, 0x00}, /*"l",76*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x15, 0x15, 0x15, 0x15, 0x00, 0x00}, /*"m",77*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x37, 0x00, 0x00}, /*"n",78*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x12, 0x12, 0x12, 0x0C, 0x00, 0x00}, /*"o",79*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x0E, 0x02, 0x07}, /*"p",80*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x12, 0x12, 0x12, 0x1C, 0x10, 0x38}, /*"q",81*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x06, 0x02, 0x02, 0x07, 0x00, 0x00}, /*"r",82*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x02, 0x0C, 0x10, 0x1E, 0x00, 0x00}, /*"s",83*/\r\n        {0x00, 0x00, 0x00, 0x04, 0x04, 0x1E, 0x04, 0x04, 0x04, 0x1C, 0x00, 0x00}, /*"t",84*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x12, 0x12, 0x12, 0x3C, 0x00, 0x00}, /*"u",85*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x0A, 0x0A, 0x04, 0x04, 0x00, 0x00}, /*"v",86*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x15, 0x0E, 0x0A, 0x0A, 0x00, 0x00}, /*"w",87*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x0A, 0x04, 0x0A, 0x1B, 0x00, 0x00}, /*"x",88*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x12, 0x12, 0x0C, 0x08, 0x04, 0x03}, /*"y",89*/\r\n        {0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x08, 0x04, 0x04, 0x1E, 0x00, 0x00}, /*"z",90*/\r\n        {0x18, 0x08, 0x08, 0x08, 0x08, 0x0C, 0x08, 0x08, 0x08, 0x08, 0x18, 0x00}, /*"{",91*/\r\n        {0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08}, /*"|",92*/\r\n        {0x06, 0x04, 0x04, 0x04, 0x04, 0x08, 0x04, 0x04, 0x04, 0x04, 0x06, 0x00}, /*"}",93*/\r\n        {0x16, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, /*"~",94*/\r\n};\r\n\r\nstatic void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint16_t fc, uint16_t bc, uint8_t sizey) {\r\n    uint8_t temp, sizex, t, m = 0;\r\n    uint16_t i, TypefaceNum;// Number of bytes for one character\r\n    uint16_t x0 = x;\r\n    sizex = sizey / 2;\r\n    TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;\r\n    num = num - \' \';                                    // Get the offset value\r\n    LCD_Address_Set(x, y, x + sizex - 1, y + sizey - 1);// Set the cursor position\r\n    for (i = 0; i < TypefaceNum; i++) {\r\n        temp = ascii_1206[num][i];// Call 6x12 font\r\n        for (t = 0; t < 8; t++) {\r\n            if (temp & (0x01 << t))\r\n                LCD_WR_DATA(fc);\r\n            else\r\n                LCD_WR_DATA(bc);\r\n            m++;\r\n            if (m % sizex == 0) {\r\n                m = 0;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nstatic void LCD_ShowString(uint16_t x, uint16_t y, const uint8_t *p, uint16_t fc, uint16_t bc, uint8_t sizey) {\r\n    printk_debug("LCD: Show String: \\"%s\\"\\n", p);\r\n    while (*p != \'\\0\') {\r\n        LCD_ShowChar(x, y, *p, fc, bc, sizey);\r\n        x += sizey / 2;\r\n        p++;\r\n    }\r\n}\r\n\r\nint main() {\r\n\tLCD_Init();\r\n\tLCD_ShowString(0, 0, "Hello World!", SPI_LCD_COLOR_GREEN, SPI_LCD_COLOR_BLACK, 12);\r\n}\n'})})]})}function u(x={}){const{wrapper:n}={...(0,i.a)(),...x.components};return n?(0,_.jsx)(n,{...x,children:(0,_.jsx)(c,{...x})}):c(x)}},11151:(x,n,r)=>{r.d(n,{Z:()=>t,a:()=>s});var _=r(67294);const i={},e=_.createContext(i);function s(x){const n=_.useContext(e);return _.useMemo((function(){return"function"==typeof x?x(n):{...n,...x}}),[n,x])}function t(x){let n;return n=x.disableParentContext?"function"==typeof x.components?x.components(i):x.components||i:s(x.components),_.createElement(e.Provider,{value:n},x.children)}}}]);