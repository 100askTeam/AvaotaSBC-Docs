"use strict";(self.webpackChunkavaota_docs=self.webpackChunkavaota_docs||[]).push([[8423],{5377:(t,n,r)=>{r.r(n),r.d(n,{assets:()=>_,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var e=r(85893),s=r(11151);const i={},a="SPI - \u540c\u6b65\u4e32\u884c\u63a5\u53e3",l={id:"linux-manual/amp-docs/hal/spi",title:"SPI - \u540c\u6b65\u4e32\u884c\u63a5\u53e3",description:"\u6a21\u5757\u529f\u80fd\u4ecb\u7ecd",source:"@site/docs/linux-manual/amp-docs/hal/spi.md",sourceDirName:"linux-manual/amp-docs/hal",slug:"/linux-manual/amp-docs/hal/spi",permalink:"/en-US/linux-manual/amp-docs/hal/spi",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"linuxManualSidebar",previous:{title:"SCR - \u667a\u80fd\u5361\u8bfb\u53d6\u5668",permalink:"/en-US/linux-manual/amp-docs/hal/smartcard"},next:{title:"HW Spinlock - \u786c\u4ef6\u540c\u6b65\u9501",permalink:"/en-US/linux-manual/amp-docs/hal/spin"}},_={},d=[{value:"\u6a21\u5757\u529f\u80fd\u4ecb\u7ecd",id:"\u6a21\u5757\u529f\u80fd\u4ecb\u7ecd",level:2},{value:"\u6a21\u5757\u914d\u7f6e\u4ecb\u7ecd",id:"\u6a21\u5757\u914d\u7f6e\u4ecb\u7ecd",level:2},{value:"sys_config\u6587\u4ef6\u5f15\u811a\u914d\u7f6e\u8bf4\u660e",id:"sys_config\u6587\u4ef6\u5f15\u811a\u914d\u7f6e\u8bf4\u660e",level:3},{value:"\u5e73\u53f0\u5934\u6587\u4ef6\u8d44\u6e90\u914d\u7f6e\u8bf4\u660e",id:"\u5e73\u53f0\u5934\u6587\u4ef6\u8d44\u6e90\u914d\u7f6e\u8bf4\u660e",level:3},{value:"menuconfig \u914d\u7f6e\u8bf4\u660e",id:"menuconfig-\u914d\u7f6e\u8bf4\u660e",level:3},{value:"\u6e90\u7801\u7ed3\u6784\u4ecb\u7ecd",id:"\u6e90\u7801\u7ed3\u6784\u4ecb\u7ecd",level:2},{value:"\u6a21\u5757\u63a5\u53e3\u8bf4\u660e",id:"\u6a21\u5757\u63a5\u53e3\u8bf4\u660e",level:2},{value:"\u91cd\u8981\u7ed3\u6784\u4f53\u53ca\u5b8f\u5b9a\u4e49",id:"\u91cd\u8981\u7ed3\u6784\u4f53\u53ca\u5b8f\u5b9a\u4e49",level:2},{value:"SPI\u6a21\u5f0f\u529f\u80fd\u9009\u62e9",id:"spi\u6a21\u5f0f\u529f\u80fd\u9009\u62e9",level:3},{value:"SPI\u63a7\u5236\u5668\u6a21\u5f0f\u914d\u7f6e",id:"spi\u63a7\u5236\u5668\u6a21\u5f0f\u914d\u7f6e",level:3},{value:"SPI\u63a7\u5236\u5668\u7247\u9009\u6a21\u5f0f",id:"spi\u63a7\u5236\u5668\u7247\u9009\u6a21\u5f0f",level:3},{value:"SPI\u63a7\u5236\u5668\u91c7\u6837\u6a21\u5f0f",id:"spi\u63a7\u5236\u5668\u91c7\u6837\u6a21\u5f0f",level:3},{value:"SPI\u63a7\u5236\u5668\u914d\u7f6e\u7ed3\u6784\u4f53",id:"spi\u63a7\u5236\u5668\u914d\u7f6e\u7ed3\u6784\u4f53",level:3},{value:"SPI\u4f20\u8f93\u7ed3\u6784\u4f53",id:"spi\u4f20\u8f93\u7ed3\u6784\u4f53",level:3},{value:"\u5bf9\u5916\u63d0\u4f9b\u7684API\u63a5\u53e3",id:"\u5bf9\u5916\u63d0\u4f9b\u7684api\u63a5\u53e3",level:2},{value:"hal_spi_init",id:"hal_spi_init",level:3},{value:"hal_spi_deinit",id:"hal_spi_deinit",level:3},{value:"hal_spi_write",id:"hal_spi_write",level:3},{value:"hal_spi_read",id:"hal_spi_read",level:3},{value:"hal_spi_xfer",id:"hal_spi_xfer",level:3},{value:"hal_spi_slave_abort",id:"hal_spi_slave_abort",level:3},{value:"\u6a21\u5757\u4f7f\u7528\u8303\u4f8b",id:"\u6a21\u5757\u4f7f\u7528\u8303\u4f8b",level:2},{value:"Master\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b",id:"master\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b",level:3},{value:"BIT\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b",id:"bit\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b",level:3},{value:"\u6d4b\u8bd5\u8303\u4f8b",id:"\u6d4b\u8bd5\u8303\u4f8b",level:3},{value:"Slave\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b",id:"slave\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b",level:2},{value:"Slave\u6a21\u5f0f\u4f7f\u7528\u8303\u4f8b",id:"slave\u6a21\u5f0f\u4f7f\u7528\u8303\u4f8b",level:3},{value:"Slave \u6a21\u5f0f\u6d4b\u8bd5\u8303\u4f8b",id:"slave-\u6a21\u5f0f\u6d4b\u8bd5\u8303\u4f8b",level:3},{value:"\u8c03\u8bd5\u5de5\u5177",id:"\u8c03\u8bd5\u5de5\u5177",level:2},{value:"FAQ",id:"faq",level:2},{value:"\u591a\u7b14\u6570\u636e\u8fde\u7eed\u53d1\u9001\u65f6\uff0c\u5982\u4f55\u8ba9CS\u811a\u4fdd\u6301\u4f7f\u80fd",id:"\u591a\u7b14\u6570\u636e\u8fde\u7eed\u53d1\u9001\u65f6\u5982\u4f55\u8ba9cs\u811a\u4fdd\u6301\u4f7f\u80fd",level:3}];function c(t){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...t.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.h1,{id:"spi---\u540c\u6b65\u4e32\u884c\u63a5\u53e3",children:"SPI - \u540c\u6b65\u4e32\u884c\u63a5\u53e3"}),"\n",(0,e.jsx)(n.h2,{id:"\u6a21\u5757\u529f\u80fd\u4ecb\u7ecd",children:"\u6a21\u5757\u529f\u80fd\u4ecb\u7ecd"}),"\n",(0,e.jsx)(n.p,{children:"SPI\u662f\u4e00\u79cd\u5168\u53cc\u5de5\u540c\u6b65\u4e32\u884c\u63a5\u53e3\uff0c\u53ef\u4ee5\u5de5\u4f5c\u5728Master\u6a21\u5f0f\u548cSlave\u6a21\u5f0f\uff0cSPI\u4e3b\u8981\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u5168\u53cc\u5de5\u540c\u6b65\u4e32\u884c\u63a5\u53e3"}),"\n",(0,e.jsx)(n.li,{children:"Master/Slave\u6a21\u5f0f\u53ef\u914d\u7f6e"}),"\n",(0,e.jsx)(n.li,{children:"\u652f\u6301\u6700\u592796MHz\u65f6\u949f\u9891\u7387"}),"\n",(0,e.jsx)(n.li,{children:"\u652f\u6301SPI Mode0/1/2/3"}),"\n",(0,e.jsx)(n.li,{children:"\u7247\u9009\u548c\u65f6\u949f\u7684\u6781\u6027\u548c\u76f8\u4f4d\u53ef\u914d\u7f6e"}),"\n",(0,e.jsx)(n.li,{children:"5\u4e2a\u65f6\u949f\u6e90"}),"\n",(0,e.jsx)(n.li,{children:"\u652f\u6301\u4e2d\u65ad\u6216DMA\u4f20\u8f93"}),"\n",(0,e.jsx)(n.li,{children:"\u652f\u6301\u591a\u7247\u9009"}),"\n",(0,e.jsx)(n.li,{children:"\u652f\u6301Standard Single/Dual/Quad SPI\uff0cFIFO\u6df1\u5ea664B"}),"\n",(0,e.jsx)(n.li,{children:"\u652f\u6301BIT\u6a21\u5f0f\uff0c\u7528\u4e8e3Wire\u573a\u666f\uff0c\u652f\u6301\u53ef\u7f16\u7a0b0~32bits\u5e27\u957f\u5ea6\uff08\u4ec5\u652f\u6301Master\u6a21\u5f0f\uff0c\u4e14\u4e0d\u652f\u6301DMA\u548cFIFO\u529f\u80fd\uff09"}),"\n",(0,e.jsx)(n.li,{children:"\u652f\u6301DBI\u6a21\u5f0f\uff0c\u7528\u4e8e\u663e\u793a\u8bbe\u5907\u573a\u666f\uff0c\u7528\u4e8e\u4f20\u8f93\u89c6\u9891\u6570\u636e"}),"\n"]}),"\n",(0,e.jsx)(n.h2,{id:"\u6a21\u5757\u914d\u7f6e\u4ecb\u7ecd",children:"\u6a21\u5757\u914d\u7f6e\u4ecb\u7ecd"}),"\n",(0,e.jsxs)(n.p,{children:["\u76ee\u524d\u6709\u4e24\u79cd\u65b9\u6cd5\u8fdb\u884c\u5f15\u811a\u914d\u7f6e\uff1a",(0,e.jsx)(n.code,{children:"sys_config"}),"\u548c\u5e73\u53f0\u5934\u6587\u4ef6\u3002"]}),"\n",(0,e.jsxs)(n.p,{children:["\u8fd9\u4e24\u79cd\u65b9\u6cd5\u9009\u5176\u4e2d\u4e00\u79cd\u4f7f\u7528\u5373\u53ef\uff0c\u5728\u6ca1\u6709",(0,e.jsx)(n.code,{children:"sys_config"}),"\u6587\u4ef6\u914d\u7f6e\u65f6\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5e73\u53f0\u5934\u6587\u4ef6\u3002\u5f53\u68c0\u6d4b\u5230\u6709",(0,e.jsx)(n.code,{children:"sys_config"}),"\u6587\u4ef6\u5e76\u6709\u76f8\u5173\u5173\u952e\u5b57\u65f6\uff0c\u81ea\u52a8\u5207\u6362\u4e3a\u8be5\u65b9\u6cd5\u3002"]}),"\n",(0,e.jsx)(n.h3,{id:"sys_config\u6587\u4ef6\u5f15\u811a\u914d\u7f6e\u8bf4\u660e",children:"sys_config\u6587\u4ef6\u5f15\u811a\u914d\u7f6e\u8bf4\u660e"}),"\n",(0,e.jsxs)(n.p,{children:["\u5f15\u811a\u914d\u7f6e\u5728 ",(0,e.jsx)(n.code,{children:"source/project/\u65b9\u6848/configs/sys_config.fex"})]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:"[spi1]\r\nspi1_used       = 1\r\nspi1_cs_number  = 1\r\nspi1_cs_bitmap  = 1\r\nspi1_cs0        = port:PA02<2><0><2><default>\r\nspi1_sclk       = port:PA03<2><0><2><default>\r\nspi1_mosi       = port:PA04<2><0><2><default>\r\nspi1_miso       = port:PA05<2><0><2><default>\r\nspi1_hold       = port:PA06<2><0><2><default>\r\nspi1_wp         = port:PA07<2><0><2><default>\n"})}),"\n",(0,e.jsx)(n.h3,{id:"\u5e73\u53f0\u5934\u6587\u4ef6\u8d44\u6e90\u914d\u7f6e\u8bf4\u660e",children:"\u5e73\u53f0\u5934\u6587\u4ef6\u8d44\u6e90\u914d\u7f6e\u8bf4\u660e"}),"\n",(0,e.jsxs)(n.p,{children:["\u5f15\u811a\u914d\u7f6e\u5728 ",(0,e.jsx)(n.code,{children:"rtos-hal/hal/source/spi/platform/spi_sun20iw2.h"})]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"static struct sunxi_spi_params_t g_sunxi_spi_params[] = {\r\n\t/* SPI0 */\r\n\t{\t.port = 0,\r\n\t\t.reg_base = SUNXI_SPI0_PBASE, .irq_num = SUNXI_IRQ_SPI0, .gpio_num = 6,\r\n\t\t.pclk_pll_type = HAL_SUNXI_AON_CCU, .pclk_pll_id = CLK_DEVICE,\r\n\t\t.pclk_hosc_type = HAL_SUNXI_AON_CCU, .pclk_hosc_id = CLK_HOSC,\r\n\t\t.bus_type = HAL_SUNXI_CCU, .bus_id = CLK_BUS_SPI0,\r\n\t\t.mclk_type = HAL_SUNXI_CCU, .mclk_id = CLK_SPI0,\r\n\t\t.reset_type = HAL_SUNXI_RESET, .reset_id = RST_SPI0,\r\n\t\t.gpio_clk = GPIOB(6), .gpio_mosi = GPIOB(5), .gpio_miso = GPIOB(15),\r\n\t\t.gpio_cs0 = GPIOB(4), .gpio_wp = GPIOB(14), .gpio_hold = GPIOB(7),\r\n\t\t.mux = 4, .driv_level = GPIO_DRIVING_LEVEL2,\r\n\t#ifdef CONFIG_DRIVERS_DMA\r\n\t\t.drq_tx = DRQDST_SPI0_TX, .drq_rx = DRQSRC_SPI0_RX,\r\n\t#endif\r\n\t\t.rx_fifosize = 64, .tx_fifosize = 64, .dma_force_fixed = true,\r\n\t},\r\n\t......\r\n};\n"})}),"\n",(0,e.jsx)(n.h3,{id:"menuconfig-\u914d\u7f6e\u8bf4\u660e",children:"menuconfig \u914d\u7f6e\u8bf4\u660e"}),"\n",(0,e.jsx)(n.p,{children:"\u914d\u7f6e\u8def\u5f84\u5982\u4e0b\uff1a"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:"Kernel Setup  ---\x3e\r\n\tDrivers Setup  ---\x3e\r\n\t\tSoC HAL Drivers  ---\x3e\r\n\t\t\tSPI Devices  ---\x3e\n"})}),"\n",(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:"image-20231031130415420",src:r(80362).Z+"",width:"665",height:"372"})}),"\n",(0,e.jsx)(n.h2,{id:"\u6e90\u7801\u7ed3\u6784\u4ecb\u7ecd",children:"\u6e90\u7801\u7ed3\u6784\u4ecb\u7ecd"}),"\n",(0,e.jsx)(n.p,{children:"SPI \u6a21\u5757\u4ee3\u7801\u7ed3\u6784\u5982\u4e0b\u6240\u793a\uff1a"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:"rtos-hal/\r\n|--include/hal/sunxi_hal_spi.h          // hal\u5c42\u6570\u636e\u7ed3\u6784\u548cAPI\u63a5\u53e3\u76f8\u5173\u5934\u6587\u4ef6\r\n|--hal/source/spi/platform_spi.h        // hal\u5c42\u5e73\u53f0\u76f8\u5173\u5934\u6587\u4ef6\r\n|--hal/source/spi/platform/spi_xxx.h    // hal\u5c42\u5e73\u53f0\u4fe1\u606f\u76f8\u5173\u5934\u6587\u4ef6\r\n|--hal/source/spi/common_spi.h          // hal\u5c42\u63a7\u5236\u5668\u5bc4\u5b58\u5668\u76f8\u5173\u5934\u6587\u4ef6\r\n|--hal/source/spi/hal_spi.c             // hal\u5c42\u63a5\u53e3\u9a71\u52a8\u4ee3\u7801\r\n|\r\n|--hal/test/spi/test_spi.c              // hal\u5c42\u63a5\u53e3\u6d4b\u8bd5\u4ee3\u7801\r\n|--hal/test/spi/spi_slave_driver.c      // hal\u5c42slave\u6a21\u5f0f\u9a71\u52a8\u4ee3\u7801\r\n|--hal/test/spi/test_spi_slave.c        // hal\u5c42slave\u6a21\u5f0f\u6d4b\u8bd5\u4ee3\u7801\n"})}),"\n",(0,e.jsx)(n.h2,{id:"\u6a21\u5757\u63a5\u53e3\u8bf4\u660e",children:"\u6a21\u5757\u63a5\u53e3\u8bf4\u660e"}),"\n",(0,e.jsx)(n.p,{children:"\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6\uff1a"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"#include <hal/sunxi_hal_spi.h>\n"})}),"\n",(0,e.jsx)(n.h2,{id:"\u91cd\u8981\u7ed3\u6784\u4f53\u53ca\u5b8f\u5b9a\u4e49",children:"\u91cd\u8981\u7ed3\u6784\u4f53\u53ca\u5b8f\u5b9a\u4e49"}),"\n",(0,e.jsx)(n.h3,{id:"spi\u6a21\u5f0f\u529f\u80fd\u9009\u62e9",children:"SPI\u6a21\u5f0f\u529f\u80fd\u9009\u62e9"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"#define\tSPI_CPHA\t\tBIT(0)\t/* clock phase */\r\n#define\tSPI_CPOL\t\tBIT(1)\t/* clock polarity */\r\n\r\n#define\tSPI_MODE_0\t\t(0|0)\r\n#define\tSPI_MODE_1\t\t(0|SPI_CPHA)\r\n#define\tSPI_MODE_2\t\t(SPI_CPOL|0)\r\n#define\tSPI_MODE_3\t\t(SPI_CPOL|SPI_CPHA)\r\n\r\n#define\tSPI_CS_HIGH\t\tBIT(2)\t/* chipselect active high? */\r\n#define\tSPI_LSB_FIRST\tBIT(3)\t/* per-word bits-on-wire */\r\n#define\tSPI_3WIRE\t\tBIT(4)\t/* SI/SO signals shared */\r\n#define\tSPI_LOOP\t\tBIT(5)\t/* loopback mode */\r\n#define\tSPI_NO_CS\t\tBIT(6)\t/* 1 dev/bus, no chipselect */\r\n#define\tSPI_READY\t\tBIT(7)\t/* slave pulls low to pause */\r\n#define\tSPI_TX_DUAL\t\tBIT(8)\t/* transmit with 2 wires */\r\n#define\tSPI_TX_QUAD\t\tBIT(9)\t/* transmit with 4 wires */\r\n#define\tSPI_RX_DUAL\t\tBIT(10)\t/* receive with 2 wires */\r\n#define\tSPI_RX_QUAD\t\tBIT(11)\t/* receive with 4 wires */\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"SPI_MODE_0/1/2/3\uff1a\u8bbe\u7f6eSPI\u7684\u4f20\u8f93\u6a21\u5f0f\u3002"}),"\n",(0,e.jsx)(n.li,{children:"SPI_CS_HIGH\uff1a\u8bbe\u7f6eCS\u7247\u9009\u662f\u5426\u4e3a\u9ad8\u7535\u5e73\u6709\u6548\u3002"}),"\n",(0,e.jsx)(n.li,{children:"SPI_LSB_FIRST\uff1a\u8bbe\u7f6e\u53d1\u9001\u987a\u5e8f\u662f\u4f4e\u4f4d\u5728\u524d\u3002"}),"\n",(0,e.jsx)(n.li,{children:"SPI_3WIRE\uff1a\u8bbe\u7f6eSPI\u5de5\u4f5c\u57283\u7ebf\u6a21\u5f0f\u4e0b\uff0c\u53caMOSI\u5373\u7528\u4f5c\u8f93\u5165\u4e5f\u7528\u4f5c\u8f93\u5165\uff0c\u5b9e\u73b0\u534a\u53cc\u5de5\u901a\u4fe1"}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"spi\u63a7\u5236\u5668\u6a21\u5f0f\u914d\u7f6e",children:"SPI\u63a7\u5236\u5668\u6a21\u5f0f\u914d\u7f6e"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"typedef enum\r\n{\r\n\tHAL_SPI_BUS_MASTER = 0,\r\n\tHAL_SPI_BUS_SLAVE = 1,\r\n\tHAL_SPI_BUS_BIT = 2,\r\n} hal_spi_master_bus_mode_t;\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"HAL_SPI_BUS_MASTER\uff1a\u5904\u4e8eMaster\u6a21\u5f0f\uff0c\u5916\u63a5SPI Device\u3002"}),"\n",(0,e.jsx)(n.li,{children:"HAL_SPI_BUS_SLAVE\uff1a\u5904\u4e8eSlave\u6a21\u5f0f\uff0c\u88ab\u5176\u4ed6Master\u8bbf\u95ee\u3002"}),"\n",(0,e.jsx)(n.li,{children:"HAL_SPI_BUS_BIT\uff1a\u5904\u4e8eBIT\u6a21\u5f0f\uff0c\u4f7f\u75283Wire\u65b9\u5f0f\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u3002"}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"spi\u63a7\u5236\u5668\u7247\u9009\u6a21\u5f0f",children:"SPI\u63a7\u5236\u5668\u7247\u9009\u6a21\u5f0f"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"typedef enum\r\n{\r\n\tHAL_SPI_CS_AUTO = 0,\r\n\tHAL_SPI_CS_SOFT = 1,\r\n} hal_spi_master_cs_mode_t;\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"HAL_SPI_CS_AUTO\uff1a\u786c\u4ef6\u81ea\u52a8\u63a7\u5236\uff0c\u4e0d\u9700\u8981\u9a71\u52a8\u6216\u8f6f\u4ef6\u4ecb\u5165\u3002"}),"\n",(0,e.jsx)(n.li,{children:"HAL_SPI_CS_SOFT\uff1a\u8f6f\u4ef6\u624b\u52a8\u63a7\u5236\uff0c\u7531\u9a71\u52a8\u5b8c\u6210\u76f8\u5173\u64cd\u4f5c\u3002"}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"spi\u63a7\u5236\u5668\u91c7\u6837\u6a21\u5f0f",children:"SPI\u63a7\u5236\u5668\u91c7\u6837\u6a21\u5f0f"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"typedef enum\r\n{\r\n\tSUNXI_SPI_SAMP_MODE_OLD = 0,\r\n\tSUNXI_SPI_SAMP_MODE_NEW = 1,\r\n} hal_spi_master_bus_sample_mode_t;\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"SUNXI_SPI_SAMP_MODE_OLD\uff1a\u7c97\u8c03\u6a21\u5f0f\uff0c\u5171\u67093\u6863\u53ef\u8c03"}),"\n",(0,e.jsx)(n.li,{children:"SUNXI_SPI_SAMP_MODE_NEW\uff1a\u7ec6\u8c03\u6a21\u5f0f\uff0c\u5171\u67097\u6863\u53ef\u8c03"}),"\n"]}),"\n",(0,e.jsxs)(n.blockquote,{children:["\n",(0,e.jsx)(n.p,{children:"\u7c97\u8c03\u6a21\u5f0f\u4e3a\u9a71\u52a8\u6839\u636e\u65f6\u949f\u9891\u7387\u81ea\u52a8\u8bc6\u522b\uff0c\u4e0d\u9700\u8981\u989d\u5916\u914d\u7f6e"}),"\n"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"typedef enum\r\n{\r\n\tSUNXI_SPI_SAMP_DELAY_CYCLE_0_0 = 0,\r\n\tSUNXI_SPI_SAMP_DELAY_CYCLE_0_5 = 1,\r\n\tSUNXI_SPI_SAMP_DELAY_CYCLE_1_0 = 2,\r\n\tSUNXI_SPI_SAMP_DELAY_CYCLE_1_5 = 3,\r\n\tSUNXI_SPI_SAMP_DELAY_CYCLE_2_0 = 4,\r\n\tSUNXI_SPI_SAMP_DELAY_CYCLE_2_5 = 5,\r\n\tSUNXI_SPI_SAMP_DELAY_CYCLE_3_0 = 6,\r\n} hal_spi_master_spi_sample_mode_t;\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"SUNXI_SPI_SAMP_DELAY_CYCLE\uff1a\u91c7\u6837\u5ef6\u65f6\u8c03\u8282\u6321\u4f4d\u9009\u62e9"}),"\n"]}),"\n",(0,e.jsxs)(n.blockquote,{children:["\n",(0,e.jsx)(n.p,{children:"\u5f53\u91c7\u6837\u6a21\u5f0f\u5904\u4e8e\u7ec6\u8c03\u65f6\uff0c\u624d\u4f1a\u4f7f\u7528\u5230\u8be5\u53c2\u6570"}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"spi\u63a7\u5236\u5668\u914d\u7f6e\u7ed3\u6784\u4f53",children:"SPI\u63a7\u5236\u5668\u914d\u7f6e\u7ed3\u6784\u4f53"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"typedef struct\r\n{\r\n\thal_spi_master_bus_mode_t bus_mode; // SPI\u63a7\u5236\u5668\u914d\u7f6e\r\n\thal_spi_master_cs_mode_t cs_mode;   // SPI\u63a7\u5236\u5668\u7247\u9009\u6a21\u5f0f\r\n\thal_spi_master_bus_sample_mode_t bus_sample_mode;   // SPI\u63a7\u5236\u5668\u91c7\u6837\u6a21\u5f0f - \u7c97\u8c03\r\n\thal_spi_master_spi_sample_mode_t spi_sample_mode;   // SPI\u63a7\u5236\u5668\u91c7\u6837\u6a21\u5f0f - \u7ec6\u8c03\r\n\tuint32_t spi_sample_delay;  // SPI\u63a7\u5236\u5668\u7ec6\u8c03\u91c7\u6837\u5ef6\u65f6\r\n\tuint8_t chipselect; /* SPI slave device selection */\r\n\tuint32_t clock_frequency; /* SPI master clock frequency setting */\r\n\tuint32_t mode;  // SPI\u6a21\u5f0f/\u529f\u80fd\u9009\u62e9\r\n\tbool sip;\r\n\tbool flash;\r\n} hal_spi_master_config_t;\n"})}),"\n",(0,e.jsx)(n.h3,{id:"spi\u4f20\u8f93\u7ed3\u6784\u4f53",children:"SPI\u4f20\u8f93\u7ed3\u6784\u4f53"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"typedef struct\r\n{\r\n\tconst uint8_t *tx_buf;\t/* Data buffer to send */\r\n\tuint32_t tx_len;\t\t/* The total number of bytes to send */\r\n\tuint32_t tx_single_len;\t/* The number of bytes to send in single mode */\r\n\tuint8_t *rx_buf;\t\t/* Received data buffer, */\r\n\tuint32_t rx_len;\t\t/* The valid number of bytes received */\r\n\tuint8_t tx_nbits : 3;\t/* Data buffer to send in nbits mode */\r\n\tuint8_t rx_nbits : 3;\t/* Data buffer to received in nbits mode */\r\n\tuint8_t dummy_byte;\t\t/* Flash send dummy byte, default 0*/\r\n#define\tSPI_NBITS_SINGLE\t0x01 /* 1bit transfer */\r\n#define\tSPI_NBITS_DUAL\t\t0x02 /* 2bits transfer */\r\n#define\tSPI_NBITS_QUAD\t\t0x04 /* 4bits transfer */\r\n\tuint8_t bits_per_word;\t/* transfer bit_per_word */\r\n} hal_spi_master_transfer_t;\n"})}),"\n",(0,e.jsx)(n.h2,{id:"\u5bf9\u5916\u63d0\u4f9b\u7684api\u63a5\u53e3",children:"\u5bf9\u5916\u63d0\u4f9b\u7684API\u63a5\u53e3"}),"\n",(0,e.jsx)(n.h3,{id:"hal_spi_init",children:"hal_spi_init"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u539f\u578b:"}),"\n"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_status_t hal_spi_init(int port, hal_spi_master_config_t *cfg)\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u4f5c\u7528\uff1aSPI\u6a21\u5757\u521d\u59cb\u5316\uff0c\u4e3b\u8981\u7533\u8bf7\u4e2d\u65ad\u3001pinctrl\u521d\u59cb\u5316\u3001clk\u521d\u59cb\u5316\u3001SPI\u6a21\u5757\uff0c\u5305\u62ecSPI\u603b\u7ebf\u6700\u5927\u4f20\u8f93\u901f\u7387\u3001\u7247\u9009\u6a21\u5f0f\u7b49\u7b49"}),"\n"]}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsxs)(n.li,{children:["\u53c2\u6570\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsxs)(n.li,{children:["port",":SPI","\u7aef\u53e3\u53f7"]}),"\n",(0,e.jsx)(n.li,{children:"cfg:\u914d\u7f6e\u4fe1\u606f"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(n.li,{children:["\u8fd4\u56de\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"0:\u6210\u529f"}),"\n",(0,e.jsx)(n.li,{children:"\u8d1f\u6570:\u5931\u8d25"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"hal_spi_deinit",children:"hal_spi_deinit"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u539f\u578b:"}),"\n"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_status_t hal_spi_deinit(int port)\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u4f5c\u7528\uff1aSPI\u6a21\u5757\u53bb\u521d\u59cb\u5316"}),"\n",(0,e.jsxs)(n.li,{children:["\u53c2\u6570\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsxs)(n.li,{children:["port",":SPI","\u7aef\u53e3\u53f7"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsxs)(n.li,{children:["\u8fd4\u56de\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"0:\u6210\u529f"}),"\n",(0,e.jsx)(n.li,{children:"\u8d1f\u6570:\u5931\u8d25"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"hal_spi_write",children:"hal_spi_write"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u539f\u578b:"}),"\n"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_status_t hal_spi_write(int port, const uint8_t *buf, uint32_t size)\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u4f5c\u7528\uff1a\u53d1\u9001\u6570\u636e\uff0c\u8c03hal_spi_xfer\u63a5\u53e3"}),"\n",(0,e.jsxs)(n.li,{children:["\u53c2\u6570\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsxs)(n.li,{children:["port",":SPI","\u7aef\u53e3\u53f7"]}),"\n",(0,e.jsx)(n.li,{children:"buf:\u53d1\u9001\u6570\u636e"}),"\n",(0,e.jsx)(n.li,{children:"size:\u53d1\u9001\u6570\u636e\u5927\u5c0f"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(n.li,{children:["\u8fd4\u56de\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"0:\u6210\u529f"}),"\n",(0,e.jsx)(n.li,{children:"\u8d1f\u6570:\u5931\u8d25"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"hal_spi_read",children:"hal_spi_read"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u539f\u578b:"}),"\n"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_status_t hal_spi_read(int port, uint8_t *buf, uint32_t size)\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u4f5c\u7528\uff1a\u63a5\u6536\u6570\u636e\uff0c\u8c03hal_spi_xfer\u63a5\u53e3"}),"\n",(0,e.jsxs)(n.li,{children:["\u53c2\u6570\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsxs)(n.li,{children:["port",":SPI","\u7aef\u53e3\u53f7"]}),"\n",(0,e.jsx)(n.li,{children:"buf:\u63a5\u6536\u6570\u636e"}),"\n",(0,e.jsx)(n.li,{children:"size:\u63a5\u6536\u6570\u636e\u5927\u5c0f"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(n.li,{children:["\u8fd4\u56de\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"0:\u6210\u529f"}),"\n",(0,e.jsx)(n.li,{children:"\u8d1f\u6570:\u5931\u8d25"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"hal_spi_xfer",children:"hal_spi_xfer"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u539f\u578b:"}),"\n"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_status_t hal_spi_xfer(int port, hal_spi_master_transfer_t *t, int num)\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u4f5c\u7528\uff1a\u53d1\u9001\u6216\u63a5\u6536\u6570\u636e"}),"\n",(0,e.jsxs)(n.li,{children:["\u53c2\u6570\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsxs)(n.li,{children:["port",":SPI","\u7aef\u53e3\u53f7"]}),"\n",(0,e.jsx)(n.li,{children:"t:\u6307\u5411\u4f20\u8f93\u5305\u5934\u7684\u6307\u9488"}),"\n",(0,e.jsx)(n.li,{children:"num:\u4f20\u8f93\u5305\u7684\u4e2a\u6570"}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(n.li,{children:["\u8fd4\u56de\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"0:\u6210\u529f"}),"\n",(0,e.jsx)(n.li,{children:"\u8d1f\u6570:\u5931\u8d25"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(n.h3,{id:"hal_spi_slave_abort",children:"hal_spi_slave_abort"}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u539f\u578b:"}),"\n"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_status_t hal_spi_slave_abort(int port)\n"})}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"\u4f5c\u7528\uff1a\u7ec8\u6b62slave\u6a21\u5f0f\u4f20\u8f93"}),"\n",(0,e.jsxs)(n.li,{children:["\u53c2\u6570\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsxs)(n.li,{children:["port",":SPI","\u7aef\u53e3\u53f7"]}),"\n"]}),"\n"]}),"\n",(0,e.jsxs)(n.li,{children:["\u8fd4\u56de\uff1a","\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:"0:\u6210\u529f"}),"\n",(0,e.jsx)(n.li,{children:"\u8d1f\u6570:\u5931\u8d25"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,e.jsx)(n.h2,{id:"\u6a21\u5757\u4f7f\u7528\u8303\u4f8b",children:"\u6a21\u5757\u4f7f\u7528\u8303\u4f8b"}),"\n",(0,e.jsx)(n.h3,{id:"master\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b",children:"Master\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_config_t cfg = { 0 };\r\ncfg.bus_mode = HAL_SPI_BUS_MASTER;\r\ncfg.cs_mode = HAL_SPI_CS_AUTO;\r\ncfg.clock_frequency = 10000000;\r\ncfg.chipselect = 0;\r\ncfg.mode = SPI_MODE_0;\r\ncfg.sip = 0;\r\ncfg.flash = 0;\r\nhal_spi_init(port, &cfg);\n"})}),"\n",(0,e.jsx)(n.h3,{id:"bit\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b",children:"BIT\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_config_t cfg = { 0 };\r\ncfg.bus_mode = HAL_SPI_BUS_BIT;\r\n......\r\nhal_spi_init(port, &cfg);\r\n\r\nhal_spi_master_transfer_t tr = {\r\n\t.tx_buf = &buf,\r\n\t.tx_len = 1,\r\n\t.rx_buf = NULL,\r\n\t.rx_len = 0,\r\n\t.bits_per_word = 8,\r\n};\r\nhal_spi_xfer(port, tr, 1);\n"})}),"\n",(0,e.jsx)(n.h3,{id:"\u6d4b\u8bd5\u8303\u4f8b",children:"\u6d4b\u8bd5\u8303\u4f8b"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdint.h>\r\n#include <string.h>\r\n#include <unistd.h>\r\n#include <errno.h>\r\n#include <getopt.h>\r\n#include <sys/time.h>\r\n\r\n#include <hal_log.h>\r\n#include <hal_cmd.h>\r\n#include <hal_mem.h>\r\n#include <hal_timer.h>\r\n#include <sunxi_hal_spi.h>\r\n\r\n#define KB (1024)\r\n#define MB (1024*KB)\r\n#define US (1)\r\n#define MS (1000*US)\r\n#define S  (1000*MS)\r\n\r\nstatic void pabort(const char *s)\r\n{\r\n\tif (errno != 0)\r\n\t\tperror(s);\r\n\telse\r\n\t\thal_log_err("%s\\n", s);\r\n\r\n\tabort();\r\n}\r\n\r\nstatic int port = 1;\r\nstatic uint32_t mode;\r\nstatic uint8_t bits = 8;\r\nstatic uint32_t speed = 5000000;\r\nstatic int verbose;\r\nstatic int transfer_size;\r\nstatic int iterations;\r\n\r\nstatic uint8_t default_tx[] = {\r\n\t0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n\t0x40, 0x00, 0x00, 0x00, 0x00, 0x95,\r\n\t0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n\t0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n\t0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,\r\n\t0xF0, 0x0D,\r\n};\r\n\r\nstatic uint8_t default_rx[sizeof(default_tx)];\r\nstatic char *input_tx;\r\n\r\nstatic void hex_dump(const void *src, size_t length, size_t line_size,\r\n\t\t\t char *prefix)\r\n{\r\n\tint i = 0;\r\n\tconst unsigned char *address = src;\r\n\tconst unsigned char *line = address;\r\n\tunsigned char c;\r\n\r\n\tprintf("%s | ", prefix);\r\n\twhile (length-- > 0) {\r\n\t\tprintf("%02X ", *address++);\r\n\t\tif (!(++i % line_size) || (length == 0 && i % line_size)) {\r\n\t\t\tif (length == 0) {\r\n\t\t\t\twhile (i++ % line_size)\r\n\t\t\t\t\tprintf("__ ");\r\n\t\t\t}\r\n\t\t\tprintf(" |");\r\n\t\t\twhile (line < address) {\r\n\t\t\t\tc = *line++;\r\n\t\t\t\tprintf("%c", (c < 32 || c > 126) ? \'.\' : c);\r\n\t\t\t}\r\n\t\t\tprintf("|\\n");\r\n\t\t\tif (length > 0)\r\n\t\t\t\tprintf("%s | ", prefix);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/*\r\n *  Unescape - process hexadecimal escape character\r\n *      converts shell input "\\x23" -> 0x23\r\n */\r\nstatic int unescape(char *_dst, char *_src, size_t len)\r\n{\r\n\tint ret = 0;\r\n\tint match;\r\n\tchar *src = _src;\r\n\tchar *dst = _dst;\r\n\tunsigned int ch;\r\n\r\n\twhile (*src) {\r\n\t\tif (*src == \'\\\\\' && *(src+1) == \'x\') {\r\n\t\t\tmatch = sscanf(src + 2, "%2x", &ch);\r\n\t\t\tif (!match)\r\n\t\t\t\tpabort("malformed input string");\r\n\r\n\t\t\tsrc += 4;\r\n\t\t\t*dst++ = (unsigned char)ch;\r\n\t\t} else {\r\n\t\t\t*dst++ = *src++;\r\n\t\t}\r\n\t\tret++;\r\n\t}\r\n\treturn ret;\r\n}\r\n\r\nstatic unsigned long transfer(int port, uint8_t const *tx, uint8_t const *rx, size_t len)\r\n{\r\n\thal_spi_master_status_t ret = 0;\r\n\tunsigned long usec = 0;\r\n\tstruct timeval start, end;\r\n\thal_spi_master_transfer_t tr = {\r\n\t\t.tx_buf = (uint8_t *)tx,\r\n\t\t.tx_len = len,\r\n\t\t.rx_buf = (uint8_t *)rx,\r\n\t\t.rx_len = len,\r\n\t\t.tx_single_len = len,\r\n\t\t.dummy_byte = 0,\r\n\t\t.bits_per_word = bits,\r\n\t};\r\n\r\n\tif (mode & SPI_TX_QUAD)\r\n\t\ttr.tx_nbits = 4;\r\n\telse if (mode & SPI_TX_DUAL)\r\n\t\ttr.tx_nbits = 2;\r\n\telse if (mode & SPI_RX_QUAD)\r\n\t\ttr.rx_nbits = 4;\r\n\telse if (mode & SPI_RX_DUAL)\r\n\t\ttr.rx_nbits = 2;\r\n\tif (!(mode & SPI_LOOP)) {\r\n\t\tif (mode & (SPI_TX_QUAD | SPI_TX_DUAL))\r\n\t\t\ttr.rx_buf = 0;\r\n\t\telse if (mode & (SPI_RX_QUAD | SPI_RX_DUAL))\r\n\t\t\ttr.tx_buf = 0;\r\n\t\telse if (mode & SPI_3WIRE)\r\n\t\t\ttr.rx_buf = 0;\r\n\t}\r\n\r\n\tgettimeofday(&start, NULL);\r\n\tret = hal_spi_xfer(port, &tr, 1);\r\n\tgettimeofday(&end, NULL);\r\n\tif (ret < 0)\r\n\t\tpabort("can\'t send spi message");\r\n\r\n\tif (verbose)\r\n\t{\r\n\t\thex_dump(tx, len, 32, "TX");\r\n\t\thex_dump(rx, len, 32, "RX");\r\n\t}\r\n\r\n\tif (memcmp(tx, rx, len))\r\n\t\thal_log_info("rx/tx buffer is not same, data error!!!\\n");\r\n\r\n\tusec = (1000000 * (end.tv_sec - start.tv_sec) + end.tv_usec - start.tv_usec);\r\n\treturn usec;\r\n}\r\n\r\nstatic void print_usage(const char *prog)\r\n{\r\n\thal_log_info("Usage: %s [-DsblHOLC3vpNR24SI]\\n", prog);\r\n\tputs("  -D --device   device port to use (default 1)\\n"\r\n\t     "  -s --speed    max speed (Hz)\\n"\r\n\t     "  -b --bpw      bits per word\\n"\r\n\t     "  -l --loop     loopback\\n"\r\n\t     "  -H --cpha     clock phase\\n"\r\n\t     "  -O --cpol     clock polarity\\n"\r\n\t     "  -L --lsb      least significant bit first\\n"\r\n\t     "  -C --cs-high  chip select active high\\n"\r\n\t     "  -3 --3wire    SI/SO signals shared\\n"\r\n\t     "  -v --verbose  Verbose (show tx buffer)\\n"\r\n\t     "  -p            Send data (e.g. \\"1234\\\\xde\\\\xad\\")\\n"\r\n\t     "  -N --no-cs    no chip select\\n"\r\n\t     "  -R --ready    slave pulls low to pause\\n"\r\n\t     "  -2 --dual     dual transfer\\n"\r\n\t     "  -4 --quad     quad transfer\\n"\r\n\t     "  -S --size     transfer size\\n"\r\n\t     "  -I --iter     iterations\\n");\r\n}\r\n\r\nstatic int parse_opts(int argc, char *argv[])\r\n{\r\n\tint ret = 0;\r\n\r\n\twhile (1) {\r\n\t\tstatic const struct option lopts[] = {\r\n\t\t\t{ "device",  1, 0, \'D\' },\r\n\t\t\t{ "speed",   1, 0, \'s\' },\r\n\t\t\t{ "bpw",     1, 0, \'b\' },\r\n\t\t\t{ "loop",    0, 0, \'l\' },\r\n\t\t\t{ "cpha",    0, 0, \'H\' },\r\n\t\t\t{ "cpol",    0, 0, \'O\' },\r\n\t\t\t{ "lsb",     0, 0, \'L\' },\r\n\t\t\t{ "cs-high", 0, 0, \'C\' },\r\n\t\t\t{ "3wire",   0, 0, \'3\' },\r\n\t\t\t{ "no-cs",   0, 0, \'N\' },\r\n\t\t\t{ "ready",   0, 0, \'R\' },\r\n\t\t\t{ "dual",    0, 0, \'2\' },\r\n\t\t\t{ "verbose", 0, 0, \'v\' },\r\n\t\t\t{ "quad",    0, 0, \'4\' },\r\n\t\t\t{ "size",    1, 0, \'S\' },\r\n\t\t\t{ "iter",    1, 0, \'I\' },\r\n\t\t\t{ NULL, 0, 0, 0 },\r\n\t\t};\r\n\t\tint c;\r\n\r\n\t\tc = getopt_long(argc, argv, "D:s:b:lHOLC3NR24p:vS:I:",\r\n\t\t\t\tlopts, NULL);\r\n\r\n\t\tif (c == -1)\r\n\t\t\tbreak;\r\n\r\n\t\tswitch (c) {\r\n\t\tcase \'D\':\r\n\t\t\tport = atoi(optarg);\r\n\t\t\tbreak;\r\n\t\tcase \'s\':\r\n\t\t\tspeed = atoi(optarg);\r\n\t\t\tbreak;\r\n\t\tcase \'b\':\r\n\t\t\tbits = atoi(optarg);\r\n\t\t\tbreak;\r\n\t\tcase \'l\':\r\n\t\t\tmode |= SPI_LOOP;\r\n\t\t\tbreak;\r\n\t\tcase \'H\':\r\n\t\t\tmode |= SPI_CPHA;\r\n\t\t\tbreak;\r\n\t\tcase \'O\':\r\n\t\t\tmode |= SPI_CPOL;\r\n\t\t\tbreak;\r\n\t\tcase \'L\':\r\n\t\t\tmode |= SPI_LSB_FIRST;\r\n\t\t\tbreak;\r\n\t\tcase \'C\':\r\n\t\t\tmode |= SPI_CS_HIGH;\r\n\t\t\tbreak;\r\n\t\tcase \'3\':\r\n\t\t\tmode |= SPI_3WIRE;\r\n\t\t\tbreak;\r\n\t\tcase \'N\':\r\n\t\t\tmode |= SPI_NO_CS;\r\n\t\t\tbreak;\r\n\t\tcase \'v\':\r\n\t\t\tverbose = 1;\r\n\t\t\tbreak;\r\n\t\tcase \'R\':\r\n\t\t\tmode |= SPI_READY;\r\n\t\t\tbreak;\r\n\t\tcase \'p\':\r\n\t\t\tinput_tx = optarg;\r\n\t\t\tbreak;\r\n\t\tcase \'2\':\r\n\t\t\tmode |= SPI_TX_DUAL;\r\n\t\t\tbreak;\r\n\t\tcase \'4\':\r\n\t\t\tmode |= SPI_TX_QUAD;\r\n\t\t\tbreak;\r\n\t\tcase \'S\':\r\n\t\t\ttransfer_size = atoi(optarg);\r\n\t\t\tbreak;\r\n\t\tcase \'I\':\r\n\t\t\titerations = atoi(optarg);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tprint_usage(argv[0]);\r\n\t\t\tret = -1;\r\n\t\t}\r\n\t}\r\n\tif (mode & SPI_LOOP) {\r\n\t\tif (mode & SPI_TX_DUAL)\r\n\t\t\tmode |= SPI_RX_DUAL;\r\n\t\tif (mode & SPI_TX_QUAD)\r\n\t\t\tmode |= SPI_RX_QUAD;\r\n\t}\r\n\r\n\treturn ret;\r\n}\r\n\r\nstatic void transfer_escaped_string(int port, char *str)\r\n{\r\n\tsize_t size = strlen(str);\r\n\tuint8_t *tx;\r\n\tuint8_t *rx;\r\n\r\n\ttx = hal_malloc(size);\r\n\tif (!tx)\r\n\t\tpabort("can\'t allocate tx buffer");\r\n\r\n\trx = hal_malloc(size);\r\n\tif (!rx)\r\n\t\tpabort("can\'t allocate rx buffer");\r\n\r\n\tsize = unescape((char *)tx, str, size);\r\n\ttransfer(port, tx, rx, size);\r\n\thal_free(rx);\r\n\thal_free(tx);\r\n}\r\n\r\nstatic void show_transfer_info(unsigned long size, unsigned long time)\r\n{\r\n\tdouble rate;\r\n\r\n\tprintf("total size   : ");\r\n\tif (size >= MB) {\r\n\t\tprintf("%.2lf MB", (double)size/(double)MB);\r\n\t} else if (size >= KB) {\r\n\t\tprintf("%.2lf KB", (double)size/(double)KB);\r\n\t} else {\r\n\t\tprintf("%lu B", size);\r\n\t}\r\n\tprintf("\\n");\r\n\r\n\tprintf("total time   : ");\r\n\tif (time >= S) {\r\n\t\tprintf("%.2lf s", (double)time/(double)S);\r\n\t} else if (time >= MS) {\r\n\t\tprintf("%.2lf ms", (double)time/(double)MS);\r\n\t} else {\r\n\t\tprintf("%.2lf us", (double)time/(double)US);\r\n\t}\r\n\tprintf("\\n");\r\n\r\n\trate = ((double)size / (double)MB) / ((double)time / (double)S);\r\n\tprintf("averange rate: %.2lf MB/s\\n", rate);\r\n}\r\n\r\nstatic unsigned long transfer_buf(int port, int len)\r\n{\r\n\tuint8_t *tx;\r\n\tuint8_t *rx;\r\n\tint i;\r\n\tunsigned long usec = 0;\r\n\r\n\ttx = hal_malloc(len);\r\n\tif (!tx)\r\n\t\tpabort("can\'t allocate tx buffer");\r\n\r\n\tsrand(time(NULL));\r\n\tfor (i = 0; i < len; i++)\r\n\t\ttx[i] = random();\r\n\r\n\trx = hal_malloc(len);\r\n\tif (!rx)\r\n\t\tpabort("can\'t allocate rx buffer");\r\n\r\n\tusec = transfer(port, tx, rx, len);\r\n\r\n\tif (mode & SPI_LOOP) {\r\n\t\tif (memcmp(tx, rx, len)) {\r\n\t\t\tfprintf(stderr, "transfer error !\\n");\r\n\t\t\thex_dump(tx, len, 32, "TX");\r\n\t\t\thex_dump(rx, len, 32, "RX");\r\n\t\t\texit(1);\r\n\t\t}\r\n\t}\r\n\r\n\thal_free(rx);\r\n\thal_free(tx);\r\n\r\n\treturn usec;\r\n}\r\n\r\nstatic int cmd_spidev_test(int argc, char **argv)\r\n{\r\n\thal_spi_master_config_t cfg = { 0 };\r\n\r\n\tport = 1;\r\n\tmode = 0;\r\n\tbits = 8;\r\n\tspeed = 5000000;\r\n\tverbose = 0;\r\n\ttransfer_size = 0;\r\n\titerations = 0;\r\n\tinput_tx = NULL;\r\n\tmemset(default_rx, 0, sizeof(default_rx));\r\n\r\n\tif (parse_opts(argc, argv) < 0) {\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (mode & SPI_3WIRE)\r\n\t\tcfg.bus_mode = HAL_SPI_BUS_BIT;\r\n\telse\r\n\t\tcfg.bus_mode = HAL_SPI_BUS_MASTER;\r\n\tcfg.cs_mode = HAL_SPI_CS_AUTO;\r\n\tcfg.clock_frequency = speed;\r\n\tcfg.chipselect = 0;\r\n\tcfg.mode = mode;\r\n\tcfg.sip = 0;\r\n\tcfg.flash = 0;\r\n\thal_spi_init(port, &cfg);\r\n\r\n\thal_log_info("spi mode: 0x%x\\n", mode);\r\n\thal_log_info("bits per word: %u\\n", bits);\r\n\thal_log_info("max speed: %u Hz (%u kHz)\\n", speed, speed/1000);\r\n\r\n\tif (input_tx)\r\n\t\ttransfer_escaped_string(port, input_tx);\r\n\telse if (transfer_size) {\r\n\t\tunsigned long total_size = transfer_size * iterations;\r\n\t\tunsigned long total_usec = 0;\r\n\t\tint i;\r\n\r\n\t\tfor (i = 0; i < iterations; i++)\r\n\t\t\ttotal_usec += transfer_buf(port, transfer_size);\r\n\r\n\t\tshow_transfer_info(total_size, total_usec);\r\n\t\tprintf("averange time: %.2lf us\\n", (double)total_usec/(double)(iterations));\r\n\t} else\r\n\t\ttransfer(port, default_tx, default_rx, sizeof(default_tx));\r\n\r\n\thal_spi_deinit(port);\r\n\r\n\treturn 0;\r\n}\r\n\r\nFINSH_FUNCTION_EXPORT_CMD(cmd_spidev_test, hal_spidev_test, spidev hal APIs tests)\n'})}),"\n",(0,e.jsx)(n.h2,{id:"slave\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b",children:"Slave\u6a21\u5f0f\u4f7f\u7528\u53ca\u6d4b\u8bd5\u8303\u4f8b"}),"\n",(0,e.jsx)(n.h3,{id:"slave\u6a21\u5f0f\u4f7f\u7528\u8303\u4f8b",children:"Slave\u6a21\u5f0f\u4f7f\u7528\u8303\u4f8b"}),"\n",(0,e.jsx)(n.p,{children:"\u91cd\u70b9\u4ee3\u7801\uff1a"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_config_t cfg = { 0 };\r\ncfg.bus_mode = HAL_SPI_BUS_SLAVE;\r\ncfg.clock_frequency = 10000000;\r\ncfg.chipselect = 0;\r\ncfg.mode = SPI_MODE_0;\r\nhal_spi_init(port, &cfg);\n"})}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdint.h>\r\n#include <string.h>\r\n#include <unistd.h>\r\n#include <sys/time.h>\r\n\r\n#include <hal_log.h>\r\n#include <hal_cmd.h>\r\n#include <hal_mem.h>\r\n#include <hal_timer.h>\r\n#include <hal_thread.h>\r\n#include <sunxi_hal_spi.h>\r\n#include <platform_spi.h>\r\n\r\n#ifdef CONFIG_ARCH_SUN20IW2\r\n#define SPI_SLAVE_THREAD_STACK_SIZE 4096\r\n#else\r\n#define SPI_SLAVE_THREAD_STACK_SIZE 8192\r\n#endif\r\n\r\n#define SLAVE_CACHE_MAX (4096)\r\n\r\n#define PKT_HEAD_LEN 5\r\n#define OP_MASK\t\t0\r\n#define ADDR_MASK_0\t1\r\n#define ADDR_MASK_1\t2\r\n#define LEN_MASK_0\t3\r\n#define LEN_MASK_1\t4\r\n\r\n#define SUNXI_OP_WRITE\t0x01\r\n#define SUNXI_OP_READ\t0x03\r\n#define SUNXI_OP_HEAD\t0xff\r\n\r\nenum sunxi_spi_slave_status {\r\n\tSUNXI_SPI_SLAVE_NONE = 0,\r\n\tSUNXI_SPI_SLAVE_RUNNING,\r\n\tSUNXI_SPI_SLAVE_RETRY,\r\n\tSUNXI_SPI_SLAVE_STOP,\r\n};\r\n\r\nstruct sunxi_spi_slave_head {\r\n\tu8 op_code;\r\n\tu16 addr;\r\n\tu16 len;\r\n};\r\n\r\nstruct sunxi_spi_slave_frame {\r\n\tu8 data[PKT_HEAD_LEN];\r\n\tstruct sunxi_spi_slave_head pkt_head;\r\n\tu8 *tx_buf;\r\n\tu8 *rx_buf;\r\n};\r\n\r\nstruct sunxi_spi_slave_cache {\r\n\thal_spinlock_t buffer_lock;\r\n\tu8 *buffer;\r\n\tu32 size;\r\n};\r\n\r\nstruct sunxi_spi_slave_test {\r\n\tint  port;\r\n\thal_spi_master_config_t cfg;\r\n\thal_sem_t semaphore_finished;\r\n\thal_spi_master_transfer_t xfer;\r\n\tstruct sunxi_spi_slave_frame frame;\r\n\tstruct sunxi_spi_slave_cache cache;\r\n\tenum sunxi_spi_slave_status status;\r\n\thal_thread_t thread_handle;\r\n\tchar task_name[256];\r\n};\r\n\r\nstatic struct sunxi_spi_slave_test spi_slave_test[HAL_SPI_MASTER_MAX];\r\n\r\nstatic bool sunxi_spi_dump_data(const uint8_t *buf, uint32_t offset, uint32_t len)\r\n{\r\n\tint col = 16;\r\n\tint line = len / col;\r\n\tint last = len % col;\r\n\tint i, j;\r\n\tuint8_t *buffer = (int8_t *)buf + offset;\r\n\r\n\tfor (i = 0; i < line; i++) {\r\n\t\tprintf("%08X: ", i + offset);\r\n\t\tfor (j = 0; j < col; j++) {\r\n\t\t\tprintf("%02x ", buffer[col * i + j]);\r\n\t\t}\r\n\t\tprintf("\\n");\r\n\t}\r\n\r\n\tprintf("%08X: ", col * line + offset);\r\n\tfor (j = 0; j < last; j++) {\r\n\t\tprintf("%02x ", buffer[col * line + j]);\r\n\t}\r\n\tprintf("\\n");\r\n}\r\n\r\nint sunxi_spi_init_slave_data(struct sunxi_spi_slave_test *slave, u8 pattern)\r\n{\r\n\tmemset(slave->cache.buffer, pattern, slave->cache.size);\r\n\treturn 0;\r\n}\r\n\r\nstatic bool sunxi_spi_slave_has_ptk_head(struct sunxi_spi_slave_head *head)\r\n{\r\n\tif (head->op_code || head->addr || head->len)\r\n\t\treturn true;\r\n\r\n\treturn false;\r\n}\r\n\r\nstatic void sunxi_spi_slave_head_data_parse(unsigned char *data, struct sunxi_spi_slave_head *head)\r\n{\r\n\thead->op_code = data[OP_MASK];\r\n\thead->addr = (data[ADDR_MASK_0] << 8) | data[ADDR_MASK_1];\r\n\thead->len = (data[LEN_MASK_0] << 8) | data[LEN_MASK_1];\r\n}\r\n\r\nstatic void sunxi_spi_slave_head_data_clear(unsigned char *data, int len)\r\n{\r\n\tmemset(data, 0, len);\r\n}\r\n\r\nstatic int sunxi_spi_slave_set_cache_data(struct sunxi_spi_slave_test *slave,\r\n\t\t\t\t\t\t\t\t\tstruct sunxi_spi_slave_head *head, u8 *buf)\r\n{\r\n\tstruct sunxi_spi_slave_cache *cache = &slave->cache;\r\n\tint real_size = head->len;\r\n\r\n\tif (cache->size < head->addr) {\r\n\t\thal_log_err("Set data addr over range");\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (cache->size < head->addr + head->len) {\r\n\t\treal_size = cache->size - head->addr;\r\n\t\thal_log_err("Write size %d over range, some of data will be lost, real size to write is %d",\r\n\t\t\t\thead->len, real_size);\r\n\t}\r\n\r\n\thal_spin_lock(&cache->buffer_lock);\r\n\tmemcpy(cache->buffer + head->addr, buf, real_size);\r\n\thal_spin_unlock(&cache->buffer_lock);\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic int sunxi_spi_slave_get_cache_data(struct sunxi_spi_slave_test *slave,\r\n\t\t\t\t\t\t\t\t\t\tstruct sunxi_spi_slave_head *head, u8 *buf)\r\n{\r\n\tstruct sunxi_spi_slave_cache *cache = &slave->cache;\r\n\tint real_size = head->len;\r\n\r\n\tif (cache->size < head->addr) {\r\n\t\thal_log_err("Get data addr over range");\r\n\t\treturn 0;\r\n\t}\r\n\r\n\tif (cache->size < head->addr + head->len) {\r\n\t\treal_size = cache->size - head->addr;\r\n\t\thal_log_err("Read size %d over range, some of data will be lost, real size to read is %d",\r\n\t\t\thead->len, real_size);\r\n\t}\r\n\r\n\thal_spin_lock(&cache->buffer_lock);\r\n\tmemcpy(buf, cache->buffer + head->addr, real_size);\r\n\thal_spin_unlock(&cache->buffer_lock);\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic int sunxi_spi_slave_test_submit(struct sunxi_spi_slave_test *slave)\r\n{\r\n\tstruct sunxi_spi_slave_head *pkt_head = &slave->frame.pkt_head;\r\n\tint ret;\r\n\r\n\tsunxi_spi_slave_head_data_parse(slave->frame.data, pkt_head);\r\n\r\n\tif (!sunxi_spi_slave_has_ptk_head(pkt_head)) {\r\n\t\thal_log_debug("No Package head, wait revice from master");\r\n\t\tpkt_head->op_code = SUNXI_OP_HEAD;\r\n\t\tslave->xfer.rx_buf = slave->frame.data;\r\n\t\tslave->xfer.rx_len = sizeof(slave->frame.data);\r\n\t} else {\r\n\t\tsunxi_spi_slave_head_data_clear(slave->frame.data, sizeof(slave->frame.data));\r\n\t\thal_log_debug("op=0x%x addr=0x%x len=0x%x", pkt_head->op_code, pkt_head->addr, pkt_head->len);\r\n\r\n\t\tswitch (pkt_head->op_code) {\r\n\t\tcase SUNXI_OP_WRITE:\r\n\t\t\tslave->frame.rx_buf = hal_malloc(pkt_head->len);\r\n\t\t\tslave->xfer.rx_buf = slave->frame.rx_buf;\r\n\t\t\tslave->xfer.tx_buf = NULL;\r\n\t\t\tslave->xfer.rx_len = pkt_head->len;\r\n\t\t\tbreak;\r\n\t\tcase SUNXI_OP_READ:\r\n\t\t\tslave->frame.tx_buf = hal_malloc(pkt_head->len);\r\n\t\t\tslave->xfer.tx_buf = slave->frame.tx_buf;\r\n\t\t\tslave->xfer.rx_buf = NULL;\r\n\t\t\tslave->xfer.tx_len = pkt_head->len;\r\n\t\t\tsunxi_spi_slave_get_cache_data(slave, pkt_head, (u8 *)slave->xfer.tx_buf);\r\n\t\t\thal_log_debug("sunxi slave get package operation read, send write buffer");\r\n\t\t\tsunxi_spi_dump_data(slave->xfer.tx_buf, 0, slave->xfer.len);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\thal_log_debug("unknown op code %d, wait revice from master", pkt_head->op_code);\r\n\t\t\tsunxi_spi_slave_head_data_clear(slave->frame.data, sizeof(slave->frame.data));\r\n\t\t\tpkt_head->op_code = SUNXI_OP_HEAD;\r\n\t\t\tslave->xfer.rx_buf = slave->frame.data;\r\n\t\t\tslave->xfer.tx_buf = NULL;\r\n\t\t\tslave->xfer.rx_len = sizeof(slave->frame.data);\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\treturn hal_spi_xfer(slave->port, &slave->xfer, 1);\r\n}\r\n\r\nstatic void spi_slave_driver_thread(void *pArg)\r\n{\r\n\tstruct sunxi_spi_slave_test *slave = (struct sunxi_spi_slave_test *)pArg;\r\n\tstruct sunxi_spi_slave_head *pkt_head;\r\n\tint ret;\r\n\r\n\twhile (1) {\r\n\t\tret = sunxi_spi_slave_test_submit(slave);\r\n\t\tif (ret != HAL_SPI_MASTER_OK) {\r\n\t\t\tswitch (slave->status) {\r\n\t\t\tcase SUNXI_SPI_SLAVE_RETRY:\r\n\t\t\t\thal_log_warn("slave transfer retry");\r\n\t\t\t\tsunxi_spi_slave_head_data_clear(slave->frame.data, sizeof(slave->frame.data));\r\n\t\t\t\tgoto retry;\r\n\t\t\t\tbreak;\r\n\t\t\tcase SUNXI_SPI_SLAVE_STOP:\r\n\t\t\t\thal_log_warn("slave transfer stop");\r\n\t\t\t\tgoto terminate;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\thal_log_err("error status %d and ret %d", slave->status, ret);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tpkt_head = &slave->frame.pkt_head;\r\n\t\tswitch (pkt_head->op_code) {\r\n\t\tcase SUNXI_OP_HEAD:\r\n\t\t\thal_log_debug("sunxi slave get package head");\r\n\t\t\t// sunxi_spi_dump_data(slave->xfer.rx_buf, 0, slave->xfer.len);\r\n\t\t\tbreak;\r\n\t\tcase SUNXI_OP_WRITE:\r\n\t\t\thal_log_debug("sunxi slave get package operation write, recv read buffer");\r\n\t\t\t// sunxi_spi_dump_data(slave->xfer.rx_buf, 0, slave->xfer.len);\r\n\t\t\tsunxi_spi_slave_set_cache_data(slave, pkt_head, slave->xfer.rx_buf);\r\n\t\t\thal_free(slave->xfer.rx_buf);\r\n\t\t\tslave->xfer.rx_buf = NULL;\r\n\t\t\tslave->frame.rx_buf = NULL;\r\n\t\t\tbreak;\r\n\t\tcase SUNXI_OP_READ:\r\n\t\t\thal_log_debug("send write buffer done");\r\n\t\t\thal_free((void *)slave->xfer.tx_buf);\r\n\t\t\tslave->xfer.tx_buf = NULL;\r\n\t\t\tslave->frame.tx_buf = NULL;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\thal_log_debug("sunxi slave get op_code filed");\r\n\t\t\tsunxi_spi_slave_head_data_clear(slave->frame.data, sizeof(slave->frame.data));\r\n\t\t\tbreak;\r\n\t\t}\r\n\tretry:\r\n\t\tmemset(&slave->xfer, 0, sizeof(slave->xfer));\r\n\t}\r\n\r\nterminate:\r\n\thal_sem_post(slave->semaphore_finished);\r\n}\r\n\r\nstatic int spi_slave_driver_abort(int port)\r\n{\r\n\tstruct sunxi_spi_slave_test *slave = &spi_slave_test[port];\r\n\r\n\thal_log_info("slave transfer abort");\r\n\r\n\tslave->status = SUNXI_SPI_SLAVE_RETRY;\r\n\thal_spi_slave_abort(port);\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic int spi_slave_driver_dump(int port, int addr, int size)\r\n{\r\n\tstruct sunxi_spi_slave_test *slave = &spi_slave_test[port];\r\n\r\n\tif (addr > slave->cache.size || addr + size > slave->cache.size) {\r\n\t\thal_log_err("dump addr/size out of bounds");\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tsunxi_spi_dump_data(slave->cache.buffer, addr, size);\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic int spi_slave_driver_probe(int port, uint32_t freq)\r\n{\r\n\tstruct sunxi_spi_slave_test *slave = &spi_slave_test[port];\r\n\r\n\tslave->port = port;\r\n\tslave->cfg.clock_frequency = freq;\r\n\tslave->cfg.chipselect = 0;\r\n\tslave->cfg.mode = SPI_MODE_0;\r\n\tslave->cfg.bus_mode = HAL_SPI_BUS_SLAVE;\r\n\tif (HAL_SPI_MASTER_OK != hal_spi_init(slave->port, &slave->cfg)) {\r\n\t\thal_log_err("spi init failed");\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tslave->semaphore_finished = hal_sem_create(0);\r\n\tif (slave->semaphore_finished == NULL)\r\n\t{\r\n\t\thal_log_err("[spi%d] creating semaphore_finished failed", slave->port);\r\n\t\treturn -1;\r\n\t}\r\n\r\n\thal_spin_lock_init(&slave->cache.buffer_lock);\r\n\tslave->cache.size = SLAVE_CACHE_MAX;\r\n\tslave->cache.buffer = hal_malloc(slave->cache.size);\r\n\tif (!slave->cache.buffer) {\r\n\t\thal_log_err("alloc slave cache memory failed (size %d)", slave->cache.size);\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tsunxi_spi_init_slave_data(slave, 0xff);\r\n\r\n\tsnprintf(slave->task_name, sizeof(slave->task_name), "spi%d-slave-task\\0", slave->port);\r\n\tslave->thread_handle = hal_thread_create(spi_slave_driver_thread, slave, slave->task_name,\r\n\t\t\t\t\t\t\tSPI_SLAVE_THREAD_STACK_SIZE, HAL_THREAD_PRIORITY_SYS);\r\n\tif (slave->thread_handle == NULL) {\r\n\t\thal_log_err("create thread %s failed", slave->task_name);\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tslave->status = SUNXI_SPI_SLAVE_RUNNING;\r\n\r\n\thal_thread_start(slave->thread_handle);\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic int spi_slave_driver_remove(int port)\r\n{\r\n\tstruct sunxi_spi_slave_test *slave = &spi_slave_test[port];\r\n\r\n\tslave->status = SUNXI_SPI_SLAVE_STOP;\r\n\thal_spi_slave_abort(port);\r\n\thal_sem_wait(slave->semaphore_finished);\r\n\thal_thread_stop(slave->thread_handle);\r\n\thal_free(slave->cache.buffer);\r\n\thal_spin_lock_deinit(&slave->cache.buffer_lock);\r\n\thal_spi_deinit(slave->port);\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic void print_usage(const char *name)\r\n{\r\n\thal_log_info("Usage:");\r\n\thal_log_info("\\t%s probe <port> <freq>", name);\r\n\thal_log_info("\\t%s remove <port>", name);\r\n\thal_log_info("\\t%s abort <port>", name);\r\n\thal_log_info("\\t%s dump <port> <addr> <size>", name);\r\n}\r\n\r\nstatic int cmd_spi_slave_driver(int argc, const char **argv)\r\n{\r\n\tint port;\r\n\tuint32_t freq;\r\n\tint addr, size;\r\n\r\n\tif (argc < 3) {\r\n\t\tprint_usage(argv[0]);\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tport = strtol(argv[2], NULL, 0);\r\n\tif (port < 0 && port > HAL_SPI_MASTER_MAX) {\r\n\t\thal_log_err("spi port %d not exist", port);\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tif (!strcmp(argv[1], "probe")) {\r\n\t\tfreq = strtol(argv[3], NULL, 0);\r\n\t\tspi_slave_driver_probe(port, freq);\r\n\t}\r\n\telse if (!strcmp(argv[1], "remove"))\r\n\t\tspi_slave_driver_remove(port);\r\n\telse if (!strcmp(argv[1], "abort"))\r\n\t\tspi_slave_driver_abort(port);\r\n\telse if (!strcmp(argv[1], "dump")) {\r\n\t\taddr = strtol(argv[3], NULL, 0);\r\n\t\tsize = strtol(argv[4], NULL, 0);\r\n\t\tspi_slave_driver_dump(port, addr, size);\r\n\t}\r\n\telse\r\n\t\tprint_usage(argv[0]);\r\n\r\n\treturn 0;\r\n}\r\n\r\nFINSH_FUNCTION_EXPORT_CMD(cmd_spi_slave_driver, hal_spi_slave_driver, spi hal slave driver test)\n'})}),"\n",(0,e.jsx)(n.h3,{id:"slave-\u6a21\u5f0f\u6d4b\u8bd5\u8303\u4f8b",children:"Slave \u6a21\u5f0f\u6d4b\u8bd5\u8303\u4f8b"}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stdint.h>\r\n#include <string.h>\r\n#include <unistd.h>\r\n#include <sys/time.h>\r\n\r\n#include <hal_log.h>\r\n#include <hal_cmd.h>\r\n#include <hal_mem.h>\r\n#include <hal_timer.h>\r\n#include <sunxi_hal_spi.h>\r\n#include <platform_spi.h>\r\n#define PKT_HEAD_LEN 5\r\n\r\n#define OP_MASK\t\t0\r\n#define ADDR_MASK_0\t1\r\n#define ADDR_MASK_1\t2\r\n#define LEN_MASK_0\t3\r\n#define LEN_MASK_1\t4\r\n\r\n#define SUNXI_OP_WRITE\t0x01\r\n#define SUNXI_OP_READ\t0x03\r\n\r\n#define PKT_HEAD_DELAY\t100\r\n#define PKT_XFER_DELAY\t500\r\n\r\n#define KB (1024)\r\n#define MB (1024*KB)\r\n#define US (1)\r\n#define MS (1000*US)\r\n#define S  (1000*MS)\r\n\r\nstruct sunxi_spi_slave_head {\r\n\tunsigned int op_code;\r\n\tunsigned int addr;\r\n\tunsigned int len;\r\n};\r\n\r\nstatic int verbose;\r\n\r\nstatic void hex_dump(const void *src, size_t length, size_t line_size,\r\n\t\t     char *prefix)\r\n{\r\n\tint i = 0;\r\n\tconst unsigned char *address = src;\r\n\tconst unsigned char *line = address;\r\n\tunsigned char c;\r\n\r\n\tprintf("%s | ", prefix);\r\n\twhile (length-- > 0) {\r\n\t\tprintf("%02X ", *address++);\r\n\t\tif (!(++i % line_size) || (length == 0 && i % line_size)) {\r\n\t\t\tif (length == 0) {\r\n\t\t\t\twhile (i++ % line_size)\r\n\t\t\t\t\tprintf("__ ");\r\n\t\t\t}\r\n\t\t\tprintf(" |");\r\n\t\t\twhile (line < address) {\r\n\t\t\t\tc = *line++;\r\n\t\t\t\tprintf("%c", (c < 32 || c > 126) ? \'.\' : c);\r\n\t\t\t}\r\n\t\t\tprintf("|\\n");\r\n\t\t\tif (length > 0)\r\n\t\t\t\tprintf("%s | ", prefix);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nstatic void show_transfer_info(unsigned long size, unsigned long time)\r\n{\r\n\tdouble rate;\r\n\r\n\tprintf("total size   : ");\r\n\tif (size >= MB) {\r\n\t\tprintf("%.2lf MB", (double)size/(double)MB);\r\n\t} else if (size >= KB) {\r\n\t\tprintf("%.2lf KB", (double)size/(double)KB);\r\n\t} else {\r\n\t\tprintf("%lu B", size);\r\n\t}\r\n\tprintf("\\n");\r\n\r\n\tprintf("total time   : ");\r\n\tif (time >= S) {\r\n\t\tprintf("%.2lf s", (double)time/(double)S);\r\n\t} else if (time >= MS) {\r\n\t\tprintf("%.2lf ms", (double)time/(double)MS);\r\n\t} else if (time >= US) {\r\n\t\tprintf("%.2lf us", (double)time/(double)US);\r\n\t} else {\r\n\t\tprintf("%lu ns", time);\r\n\t}\r\n\tprintf("\\n");\r\n\r\n\trate = ((double)size / (double)MB) / ((double)time / (double)S);\r\n\tprintf("averange rate: %.2lf MB/s\\n", rate);\r\n}\r\n\r\nstatic int transfer_pkg_create(char *buf, struct sunxi_spi_slave_head *head)\r\n{\r\n\tbuf[OP_MASK] = head->op_code;\r\n\tbuf[ADDR_MASK_0] = (head->addr >> 8) & 0xff;\r\n\tbuf[ADDR_MASK_1] = head->addr & 0xff;\r\n\tbuf[LEN_MASK_0] = (head->len >> 8) & 0xff;\r\n\tbuf[LEN_MASK_1] = head->len & 0xff;\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic int transfer_slave_package(int port, struct sunxi_spi_slave_head *head, char *tx_buf, char *rx_buf)\r\n{\r\n\tchar head_buf[PKT_HEAD_LEN];\r\n\thal_spi_master_transfer_t tr[2];\r\n\tint i;\r\n\tint ret;\r\n\r\n\tmemset(tr, 0, sizeof(tr));\r\n\r\n\ttransfer_pkg_create(head_buf, head);\r\n\tif (verbose) {\r\n\t\tprintf("package head : { ");\r\n\t\tfor (i = 0; i < PKT_HEAD_LEN; i++) {\r\n\t\t\tprintf("0x%02x ", head_buf[i]);\r\n\t\t}\r\n\t\tprintf("}\\n");\r\n\t}\r\n\r\n\ttr[0].tx_buf = (uint8_t *)head_buf;\r\n\ttr[0].tx_nbits = SPI_NBITS_SINGLE;\r\n\ttr[0].tx_len = sizeof(head_buf);\r\n    tr[0].tx_single_len = sizeof(head_buf);\r\n\ttr[0].rx_buf = (uint8_t *)NULL;\r\n\ttr[0].rx_nbits = 0;\r\n    tr[0].rx_len = 0;\r\n\r\n    tr[1].tx_buf = (uint8_t *)tx_buf;\r\n\ttr[1].tx_nbits = SPI_NBITS_SINGLE;\r\n\ttr[1].tx_len = head->len;\r\n    tr[1].tx_single_len = head->len;\r\n\ttr[1].rx_buf = (uint8_t *)rx_buf;\r\n\ttr[1].rx_nbits = SPI_NBITS_SINGLE;\r\n    tr[1].rx_len = head->len;\r\n\r\n    hal_spi_xfer(port, &tr[0], 1);\r\n    hal_usleep(PKT_HEAD_DELAY);\r\n    hal_spi_xfer(port, &tr[1], 1);\r\n\r\n\treturn 0;\r\n}\r\n\r\nstatic int transfer_slave(int port, uint32_t addr, uint32_t size)\r\n{\r\n\tstruct sunxi_spi_slave_head pkt_head;\r\n\tchar *tx_buf = NULL;\r\n\tchar *rx_buf = NULL;\r\n\tstruct timeval start, end;\r\n\tunsigned long nsec = 0;\r\n\tint i;\r\n\r\n\ttx_buf = hal_malloc(size);\r\n\tsrand(time(0));\r\n\tfor (i = 0; i < size; i++)\r\n\t\ttx_buf[i] = random() % 256;\r\n\r\n\trx_buf = hal_malloc(size);\r\n\tmemset(rx_buf, 0, size);\r\n\r\n\tgettimeofday(&start, NULL);\r\n\t// Write forward\r\n\tpkt_head.op_code = SUNXI_OP_WRITE;\r\n\tpkt_head.addr = addr;\r\n\tpkt_head.len = size;\r\n\ttransfer_slave_package(port, &pkt_head, tx_buf, NULL);\r\n\thal_usleep(PKT_XFER_DELAY);\r\n\t// Read back\r\n\tpkt_head.op_code = SUNXI_OP_READ;\r\n\tpkt_head.addr = addr;\r\n\tpkt_head.len = size;\r\n\ttransfer_slave_package(port, &pkt_head, NULL, rx_buf);\r\n\tgettimeofday(&end, NULL);\r\n\t// Debug\r\n\tif (verbose) {\r\n\t\thex_dump(tx_buf, size, 32, "TX");\r\n\t\thex_dump(rx_buf, size, 32, "RX");\r\n\t}\r\n\t// Compare buffer\r\n\tif (memcmp(tx_buf, rx_buf, size))\r\n\t\tprintf("rx/tx buffer is not same, compare error!!!\\n");\r\n\telse\r\n\t\tnsec += (1000000 * (end.tv_sec - start.tv_sec) + end.tv_usec - start.tv_usec);\r\n\r\n\tfree(tx_buf);\r\n\tfree(rx_buf);\r\n\r\n\treturn nsec;\r\n}\r\n\r\nstatic void print_usage(const char *name)\r\n{\r\n    hal_log_info("Usage:");\r\n\thal_log_info("\\t%s <port> <freq> <addr> <size> <loop> [debug]", name);\r\n}\r\n\r\nstatic int cmd_test_spi_slave(int argc, const char **argv)\r\n{\r\n    int  port;\r\n    hal_spi_master_config_t cfg;\r\n    uint32_t addr, size;\r\n    int loop = 1;\r\n\tunsigned long usec;\r\n\tunsigned long total_usec = 0;\r\n\tunsigned long total_size = 0;\r\n    int i;\r\n\r\n    if (argc < 6) {\r\n\t\tprint_usage(argv[0]);\r\n\t\treturn -1;\r\n\t}\r\n\r\n    memset(&cfg, 0, sizeof(cfg));\r\n    port = strtol(argv[1], NULL, 0);\r\n\tif (port < 0 && port > HAL_SPI_MASTER_MAX) {\r\n\t\thal_log_err("spi port %d not exist", port);\r\n\t\treturn -1;\r\n\t}\r\n\r\n    addr = strtol(argv[3], NULL, 0);\r\n    size = strtol(argv[4], NULL, 0);\r\n    loop = strtol(argv[5], NULL, 0);\r\n\r\n    if (argc == 7 && strcmp(argv[6], "debug") == 0)\r\n        verbose = 1;\r\n    else \r\n        verbose = 0;\r\n\r\n\thal_log_info("run spi slave test");\r\n\r\n    cfg.clock_frequency = strtol(argv[2], NULL, 0);\r\n    cfg.chipselect = 0;\r\n\tcfg.mode = SPI_MODE_0;\r\n\tcfg.bus_mode = HAL_SPI_BUS_MASTER;\r\n    hal_spi_init(port, &cfg);\r\n\r\n\thal_log_info("max speed: %u Hz (%u kHz)", cfg.clock_frequency, cfg.clock_frequency/1000);\r\n\thal_log_info("op addr : %d", addr);\r\n\thal_log_info("op size : %d", size);\r\n\r\n    if (size) {\r\n\t\tfor (i = 0; i < loop; i++) {\r\n\t\t\tusec = transfer_slave(port, addr, size);\r\n\t\t\tif (usec) {\r\n\t\t\t\ttotal_usec += usec;\r\n\t\t\t\ttotal_size += (size * 2);\r\n\t\t\t}\r\n\t\t}\r\n\t\tshow_transfer_info(total_size, total_usec);\r\n\t\tprintf("averange time: %.2lf us\\n", (double)total_usec/(double)US/(double)(loop));\r\n\t}\r\n\r\n    hal_spi_deinit(port);\r\n\r\n    hal_log_info("spi slave test finish");\r\n\r\n\treturn 0;\r\n}\r\n\r\nFINSH_FUNCTION_EXPORT_CMD(cmd_test_spi_slave, hal_spi_slave_test, spi hal slave tests)\n'})}),"\n",(0,e.jsx)(n.h1,{id:"\u8c03\u8bd5\u65b9\u6cd5",children:"\u8c03\u8bd5\u65b9\u6cd5"}),"\n",(0,e.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,e.jsx)(n.code,{children:"hal_log_info/warn/err/debug"})," \u7b49\u8c03\u8bd5\u6253\u5370\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u4fee\u6539\u7cfb\u7edf\u914d\u7f6e\uff0c\u8fbe\u5230\u4e0d\u540c\u7684\u6253\u5370\u7b49\u7ea7"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:'#define SPI_INFO(sspi, fmt, arg...)\thal_log_info("hal-sspi %08lx.sspi%d: " fmt, sspi->base, sspi->bus_num, ##arg)\r\n#define SPI_WARN(sspi, fmt, arg...)\thal_log_warn("hal-sspi %08lx.sspi%d: " fmt, sspi->base, sspi->bus_num, ##arg)\r\n#define SPI_ERR(sspi, fmt, arg...)\thal_log_err("hal-sspi %08lx.sspi%d: " fmt, sspi->base, sspi->bus_num, ##arg)\r\n#define SPI_DBG(sspi, fmt, arg...)\thal_log_debug("hal-sspi %08lx.sspi%d: " fmt, sspi->base, sspi->bus_num, ##arg)\n'})}),"\n",(0,e.jsxs)(n.p,{children:["\u4f7f\u7528 ",(0,e.jsx)(n.code,{children:"SPI_DATA_LEVEL/SPI_DUMPREG_LEVEL"})," \u5b8f\u5f00\u5173\uff0c\u53ef\u4ee5\u5728\u4f20\u8f93\u7684\u8fc7\u7a0b\u4e2d\u6253\u5370\u6536\u53d1\u6570\u636e ",(0,e.jsx)(n.code,{children:"buffer"})," \u53ca\u63a7\u5236\u5668\u5bc4\u5b58\u5668\u503c"]}),"\n",(0,e.jsx)(n.h2,{id:"\u8c03\u8bd5\u5de5\u5177",children:"\u8c03\u8bd5\u5de5\u5177"}),"\n",(0,e.jsxs)(n.p,{children:["\u5982\u679c\u5728 ",(0,e.jsx)(n.code,{children:"menuconfig"})," \u4e2d\u5c06 ",(0,e.jsx)(n.code,{children:"spi test"})," \u914d\u7f6e\u6253\u5f00\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728 RTOS \u7cfb\u7edf\u4e2d\u8fd0\u884c\u76f8\u5e94\u7684 SPI \u8c03\u8bd5\u547d\u4ee4\u3002"]}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:"hal_spidev_test"}),"    \u6d4b\u8bd5SPI Single\u6a21\u5f0f\uff0c\u53ef\u4ee5\u914d\u7f6e\u7aef\u53e3\uff0c\u9891\u7387\uff0c\u6570\u636e\u91cf\uff0c\u5faa\u73af\u6b21\u6570\u7b49\u53c2\u6570"]}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:"hal_spidev_test -D <port> -s <freq> -S <size> -I <loop> [-v]"})}),"\n"]}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:"hal_spi_slave_driver"})," Slave\u6a21\u5f0f\u9a71\u52a8\uff0c\u9700\u8981\u5148\u518dslave\u8bbe\u5907\u7aef\u8dd1\u8d77\u8be5\u9a71\u52a8\uff0c\u624d\u80fd\u5728master\u7aef\u8fdb\u884c\u76f8\u5e94\u6d4b\u8bd5"]}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:"hal_spi_slave_driver probe <port> <freq>"})}),"\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:"hal_spi_slave_driver remove <port>"})}),"\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:"hal_spi_slave_driver abort <port>"})}),"\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:"hal_spi_slave_driver dump <port> <addr> <size>"})}),"\n"]}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:"hal_spi_slave_test"}),"  Slave\u6a21\u5f0f\u6d4b\u8bd5\u547d\u4ee4\uff0c\u8be5\u547d\u4ee4\u9700\u8981\u5728master\u7aef\u8fd0\u884c"]}),"\n",(0,e.jsxs)(n.ul,{children:["\n",(0,e.jsx)(n.li,{children:(0,e.jsx)(n.code,{children:"hal_spi_slave_test <port> <freq> <addr> <size> <loop> [debug]"})}),"\n"]}),"\n",(0,e.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,e.jsx)(n.h3,{id:"\u591a\u7b14\u6570\u636e\u8fde\u7eed\u53d1\u9001\u65f6\u5982\u4f55\u8ba9cs\u811a\u4fdd\u6301\u4f7f\u80fd",children:"\u591a\u7b14\u6570\u636e\u8fde\u7eed\u53d1\u9001\u65f6\uff0c\u5982\u4f55\u8ba9CS\u811a\u4fdd\u6301\u4f7f\u80fd"}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:"\u95ee\u9898\u73b0\u8c61"}),"\uff1a\u6bcf\u5305\u6570\u636e\u53d1\u9001\u540e\uff0cCS\u811a\u90fd\u4f1a\u7ffb\u8f6c\u4e00\u6b21\uff0c\u91cd\u65b0\u4f7f\u80fd\uff0c\u5bfc\u81f4\u4e0e\u5916\u8bbe\u901a\u4fe1\u5f02\u5e38"]}),"\n",(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{alt:"image-20231031130340479",src:r(68164).Z+"",width:"1236",height:"695"})}),"\n",(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.strong,{children:"\u89e3\u51b3\u65b9\u6cd5"}),"\uff1a\u5c06 ",(0,e.jsx)(n.code,{children:"cs_mode"})," \u914d\u7f6e\u4e3a\u624b\u52a8\uff0c\u5e76\u5c06\u9700\u8981CS\u4fe1\u53f7\u5305\u5728\u5185\u7684\u591a\u5305\u6570\u636e\uff0c\u4e00\u6b21\u6027\u4f20\u7ed9\u9a71\u52a8"]}),"\n",(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:"language-c",children:"hal_spi_master_config_t cfg = { 0 };\r\nhal_spi_master_transfer_t tr[2];\r\n......\r\ncfg.cs_mode = HAL_SPI_CS_SOFT;\r\n......\r\nhal_spi_init(port, &cfg);\r\n......\r\nhal_spi_xfer(port, &tr, ARRAY_SIZE(tr));\n"})})]})}function h(t={}){const{wrapper:n}={...(0,s.a)(),...t.components};return n?(0,e.jsx)(n,{...t,children:(0,e.jsx)(c,{...t})}):c(t)}},68164:(t,n,r)=>{r.d(n,{Z:()=>e});const e=r.p+"assets/images/image-20231031130340479-6677384b273600f3881003e54ae17dcd.png"},80362:(t,n,r)=>{r.d(n,{Z:()=>e});const e=r.p+"assets/images/image-20231031130415420-37458d2ed84b2452f5d915380cdd1042.png"},11151:(t,n,r)=>{r.d(n,{Z:()=>l,a:()=>a});var e=r(67294);const s={},i=e.createContext(s);function a(t){const n=e.useContext(i);return e.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function l(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(s):t.components||s:a(t.components),e.createElement(i.Provider,{value:n},t.children)}}}]);